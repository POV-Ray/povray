# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



SHELL = /bin/sh

srcdir = .
top_srcdir = ..

prefix = /usr/local
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/Mesa
pkglibdir = $(libdir)/Mesa
pkgincludedir = $(includedir)/Mesa

top_builddir = ..

ACLOCAL = aclocal
AUTOCONF = autoconf
AUTOMAKE = automake
AUTOHEADER = autoheader

INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL} $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_SCRIPT = ${INSTALL}
transform = s,x,x,

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = @host_alias@
host_triplet = i686-pc-linux-gnu
AS = @AS@
CC = gcc
CPP = gcc -E
CXX = g++
DLLEXT = @DLLEXT@
DLLTOOL = @DLLTOOL@
ECHO = echo
EXEEXT = 
FX_CFLAGS = 
FX_LIBS = 
GGI_CFLAGS = 
GGI_LIBS =  -lggi -lgii -lgg
GLUT_CFLAGS =  -DNDEBUG
GLUT_LIBS = $(top_builddir)/src-glut/libglut.la
GLU_DIR = si-glu
LIBGLUT_VERSION_INFO = 10:1:7
LIBGLU_VERSION_INFO = 2:500:1
LIBGL_VERSION_INFO = 5:500:4
LIBMESA_VERSION_INFO = 4:500:0
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
MAINT = #
MAKEINFO = makeinfo
MESA_MD_FLAG = -MD
OBJDUMP = @OBJDUMP@
OBJEXT = o
PACKAGE = Mesa
RANLIB = ranlib
SI_GLU_VERSION_INFO = 4:500:3
STRIP = strip
SVGA_CFLAGS = 
SVGA_LIBS = 
THREAD_LIBS =  -lpthread
VERSION = 5.0
X_LIBADD =  -lXmu -lXext -lXi -lX11
demo_dirs = book demos samples xdemos
extra_includes = @extra_includes@
extra_libraries = @extra_libraries@
ggi_confdir = NONE/etc
ggi_libdir = NONE/lib
glut_dir = src-glut
use_si_glu = yes

AUTOMAKE_OPTIONS = 

INCLUDES = -I$(top_srcdir)/include $(GLUT_CFLAGS) -I$(top_srcdir)/util

check_PROGRAMS = bounce 	clearspd 	cubemap 	drawpix 	fire 	gamma 	gears 	geartrain 	glinfo 	gloss 	gltestperf 	glutfx 	isosurf 	ipers 	lodbias 	morph3d 	multiarb 	occlude 	paltex 	pixeltex 	pointblast 	ray 	readpix 	reflect 	renormal 	shadowtex 	spectex 	stex3d 	teapot 	terrain 	tessdemo 	texcyl 	texdown 	texenv 	texobj 	trispd 	tunnel 	tunnel2 	winpos


#	osdemo \

CLEANFILES = test.ppm

LDADD = $(GLUT_LIBS) 	$(top_builddir)/$(GLU_DIR)/libGLU.la 	$(top_builddir)/src/libGL.la -lm


#LDFLAGS = -no-install

EXTRA_DIST = isosurf.dat particles.cxx particles.h tunneldat.h

# use double buffering if possible
BUFFER = -db
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../conf.h
CONFIG_CLEAN_FILES = 
check_PROGRAMS =  bounce$(EXEEXT) clearspd$(EXEEXT) cubemap$(EXEEXT) \
drawpix$(EXEEXT) fire$(EXEEXT) gamma$(EXEEXT) gears$(EXEEXT) \
geartrain$(EXEEXT) glinfo$(EXEEXT) gloss$(EXEEXT) gltestperf$(EXEEXT) \
glutfx$(EXEEXT) isosurf$(EXEEXT) ipers$(EXEEXT) lodbias$(EXEEXT) \
morph3d$(EXEEXT) multiarb$(EXEEXT) occlude$(EXEEXT) paltex$(EXEEXT) \
pixeltex$(EXEEXT) pointblast$(EXEEXT) ray$(EXEEXT) readpix$(EXEEXT) \
reflect$(EXEEXT) renormal$(EXEEXT) shadowtex$(EXEEXT) spectex$(EXEEXT) \
stex3d$(EXEEXT) teapot$(EXEEXT) terrain$(EXEEXT) tessdemo$(EXEEXT) \
texcyl$(EXEEXT) texdown$(EXEEXT) texenv$(EXEEXT) texobj$(EXEEXT) \
trispd$(EXEEXT) tunnel$(EXEEXT) tunnel2$(EXEEXT) winpos$(EXEEXT)

DEFS = -DHAVE_CONFIG_H -I. -I$(srcdir) -I..
CPPFLAGS = 
LDFLAGS = 
LIBS = 
X_CFLAGS =  -I/usr/X11R6/include
X_LIBS =  -L/usr/X11R6/lib
X_EXTRA_LIBS = 
X_PRE_LIBS =  -lSM -lICE
bounce_SOURCES = bounce.c
bounce_OBJECTS =  bounce.$(OBJEXT)
bounce_LDADD = $(LDADD)
bounce_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
bounce_LDFLAGS = 
clearspd_SOURCES = clearspd.c
clearspd_OBJECTS =  clearspd.$(OBJEXT)
clearspd_LDADD = $(LDADD)
clearspd_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
clearspd_LDFLAGS = 
cubemap_SOURCES = cubemap.c
cubemap_OBJECTS =  cubemap.$(OBJEXT)
cubemap_LDADD = $(LDADD)
cubemap_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
cubemap_LDFLAGS = 
drawpix_SOURCES = drawpix.c
drawpix_OBJECTS =  drawpix.$(OBJEXT)
drawpix_LDADD = $(LDADD)
drawpix_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
drawpix_LDFLAGS = 
fire_SOURCES = fire.c
fire_OBJECTS =  fire.$(OBJEXT)
fire_LDADD = $(LDADD)
fire_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
fire_LDFLAGS = 
gamma_SOURCES = gamma.c
gamma_OBJECTS =  gamma.$(OBJEXT)
gamma_LDADD = $(LDADD)
gamma_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
gamma_LDFLAGS = 
gears_SOURCES = gears.c
gears_OBJECTS =  gears.$(OBJEXT)
gears_LDADD = $(LDADD)
gears_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
gears_LDFLAGS = 
geartrain_SOURCES = geartrain.c
geartrain_OBJECTS =  geartrain.$(OBJEXT)
geartrain_LDADD = $(LDADD)
geartrain_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
geartrain_LDFLAGS = 
glinfo_SOURCES = glinfo.c
glinfo_OBJECTS =  glinfo.$(OBJEXT)
glinfo_LDADD = $(LDADD)
glinfo_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
glinfo_LDFLAGS = 
gloss_SOURCES = gloss.c
gloss_OBJECTS =  gloss.$(OBJEXT)
gloss_LDADD = $(LDADD)
gloss_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
gloss_LDFLAGS = 
gltestperf_SOURCES = gltestperf.c
gltestperf_OBJECTS =  gltestperf.$(OBJEXT)
gltestperf_LDADD = $(LDADD)
gltestperf_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
gltestperf_LDFLAGS = 
glutfx_SOURCES = glutfx.c
glutfx_OBJECTS =  glutfx.$(OBJEXT)
glutfx_LDADD = $(LDADD)
glutfx_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
glutfx_LDFLAGS = 
isosurf_SOURCES = isosurf.c
isosurf_OBJECTS =  isosurf.$(OBJEXT)
isosurf_LDADD = $(LDADD)
isosurf_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
isosurf_LDFLAGS = 
ipers_SOURCES = ipers.c
ipers_OBJECTS =  ipers.$(OBJEXT)
ipers_LDADD = $(LDADD)
ipers_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
ipers_LDFLAGS = 
lodbias_SOURCES = lodbias.c
lodbias_OBJECTS =  lodbias.$(OBJEXT)
lodbias_LDADD = $(LDADD)
lodbias_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
lodbias_LDFLAGS = 
morph3d_SOURCES = morph3d.c
morph3d_OBJECTS =  morph3d.$(OBJEXT)
morph3d_LDADD = $(LDADD)
morph3d_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
morph3d_LDFLAGS = 
multiarb_SOURCES = multiarb.c
multiarb_OBJECTS =  multiarb.$(OBJEXT)
multiarb_LDADD = $(LDADD)
multiarb_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
multiarb_LDFLAGS = 
occlude_SOURCES = occlude.c
occlude_OBJECTS =  occlude.$(OBJEXT)
occlude_LDADD = $(LDADD)
occlude_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
occlude_LDFLAGS = 
paltex_SOURCES = paltex.c
paltex_OBJECTS =  paltex.$(OBJEXT)
paltex_LDADD = $(LDADD)
paltex_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
paltex_LDFLAGS = 
pixeltex_SOURCES = pixeltex.c
pixeltex_OBJECTS =  pixeltex.$(OBJEXT)
pixeltex_LDADD = $(LDADD)
pixeltex_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
pixeltex_LDFLAGS = 
pointblast_SOURCES = pointblast.c
pointblast_OBJECTS =  pointblast.$(OBJEXT)
pointblast_LDADD = $(LDADD)
pointblast_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
pointblast_LDFLAGS = 
ray_SOURCES = ray.c
ray_OBJECTS =  ray.$(OBJEXT)
ray_LDADD = $(LDADD)
ray_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
ray_LDFLAGS = 
readpix_SOURCES = readpix.c
readpix_OBJECTS =  readpix.$(OBJEXT)
readpix_LDADD = $(LDADD)
readpix_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
readpix_LDFLAGS = 
reflect_SOURCES = reflect.c
reflect_OBJECTS =  reflect.$(OBJEXT)
reflect_LDADD = $(LDADD)
reflect_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
reflect_LDFLAGS = 
renormal_SOURCES = renormal.c
renormal_OBJECTS =  renormal.$(OBJEXT)
renormal_LDADD = $(LDADD)
renormal_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
renormal_LDFLAGS = 
shadowtex_SOURCES = shadowtex.c
shadowtex_OBJECTS =  shadowtex.$(OBJEXT)
shadowtex_LDADD = $(LDADD)
shadowtex_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
shadowtex_LDFLAGS = 
spectex_SOURCES = spectex.c
spectex_OBJECTS =  spectex.$(OBJEXT)
spectex_LDADD = $(LDADD)
spectex_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
spectex_LDFLAGS = 
stex3d_SOURCES = stex3d.c
stex3d_OBJECTS =  stex3d.$(OBJEXT)
stex3d_LDADD = $(LDADD)
stex3d_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
stex3d_LDFLAGS = 
teapot_SOURCES = teapot.c
teapot_OBJECTS =  teapot.$(OBJEXT)
teapot_LDADD = $(LDADD)
teapot_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
teapot_LDFLAGS = 
terrain_SOURCES = terrain.c
terrain_OBJECTS =  terrain.$(OBJEXT)
terrain_LDADD = $(LDADD)
terrain_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
terrain_LDFLAGS = 
tessdemo_SOURCES = tessdemo.c
tessdemo_OBJECTS =  tessdemo.$(OBJEXT)
tessdemo_LDADD = $(LDADD)
tessdemo_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
tessdemo_LDFLAGS = 
texcyl_SOURCES = texcyl.c
texcyl_OBJECTS =  texcyl.$(OBJEXT)
texcyl_LDADD = $(LDADD)
texcyl_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texcyl_LDFLAGS = 
texdown_SOURCES = texdown.c
texdown_OBJECTS =  texdown.$(OBJEXT)
texdown_LDADD = $(LDADD)
texdown_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texdown_LDFLAGS = 
texenv_SOURCES = texenv.c
texenv_OBJECTS =  texenv.$(OBJEXT)
texenv_LDADD = $(LDADD)
texenv_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texenv_LDFLAGS = 
texobj_SOURCES = texobj.c
texobj_OBJECTS =  texobj.$(OBJEXT)
texobj_LDADD = $(LDADD)
texobj_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texobj_LDFLAGS = 
trispd_SOURCES = trispd.c
trispd_OBJECTS =  trispd.$(OBJEXT)
trispd_LDADD = $(LDADD)
trispd_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
trispd_LDFLAGS = 
tunnel_SOURCES = tunnel.c
tunnel_OBJECTS =  tunnel.$(OBJEXT)
tunnel_LDADD = $(LDADD)
tunnel_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
tunnel_LDFLAGS = 
tunnel2_SOURCES = tunnel2.c
tunnel2_OBJECTS =  tunnel2.$(OBJEXT)
tunnel2_LDADD = $(LDADD)
tunnel2_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
tunnel2_LDFLAGS = 
winpos_SOURCES = winpos.c
winpos_OBJECTS =  winpos.$(OBJEXT)
winpos_LDADD = $(LDADD)
winpos_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
winpos_LDFLAGS = 
CFLAGS = -g -O2 -Wall -O0 -DDEBUG -DMESA_TRACE -ansi -pedantic -D_REENTRANT -DPTHREADS
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@
DIST_COMMON =  README Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = gtar
GZIP_ENV = --best
DEP_FILES =  .deps/bounce.P .deps/clearspd.P .deps/cubemap.P \
.deps/drawpix.P .deps/fire.P .deps/gamma.P .deps/gears.P \
.deps/geartrain.P .deps/glinfo.P .deps/gloss.P .deps/gltestperf.P \
.deps/glutfx.P .deps/ipers.P .deps/isosurf.P .deps/lodbias.P \
.deps/morph3d.P .deps/multiarb.P .deps/occlude.P .deps/paltex.P \
.deps/pixeltex.P .deps/pointblast.P .deps/ray.P .deps/readpix.P \
.deps/reflect.P .deps/renormal.P .deps/shadowtex.P .deps/spectex.P \
.deps/stex3d.P .deps/teapot.P .deps/terrain.P .deps/tessdemo.P \
.deps/texcyl.P .deps/texdown.P .deps/texenv.P .deps/texobj.P \
.deps/trispd.P .deps/tunnel.P .deps/tunnel2.P .deps/winpos.P
SOURCES = bounce.c clearspd.c cubemap.c drawpix.c fire.c gamma.c gears.c geartrain.c glinfo.c gloss.c gltestperf.c glutfx.c isosurf.c ipers.c lodbias.c morph3d.c multiarb.c occlude.c paltex.c pixeltex.c pointblast.c ray.c readpix.c reflect.c renormal.c shadowtex.c spectex.c stex3d.c teapot.c terrain.c tessdemo.c texcyl.c texdown.c texenv.c texobj.c trispd.c tunnel.c tunnel2.c winpos.c
OBJECTS = bounce.$(OBJEXT) clearspd.$(OBJEXT) cubemap.$(OBJEXT) drawpix.$(OBJEXT) fire.$(OBJEXT) gamma.$(OBJEXT) gears.$(OBJEXT) geartrain.$(OBJEXT) glinfo.$(OBJEXT) gloss.$(OBJEXT) gltestperf.$(OBJEXT) glutfx.$(OBJEXT) isosurf.$(OBJEXT) ipers.$(OBJEXT) lodbias.$(OBJEXT) morph3d.$(OBJEXT) multiarb.$(OBJEXT) occlude.$(OBJEXT) paltex.$(OBJEXT) pixeltex.$(OBJEXT) pointblast.$(OBJEXT) ray.$(OBJEXT) readpix.$(OBJEXT) reflect.$(OBJEXT) renormal.$(OBJEXT) shadowtex.$(OBJEXT) spectex.$(OBJEXT) stex3d.$(OBJEXT) teapot.$(OBJEXT) terrain.$(OBJEXT) tessdemo.$(OBJEXT) texcyl.$(OBJEXT) texdown.$(OBJEXT) texenv.$(OBJEXT) texobj.$(OBJEXT) trispd.$(OBJEXT) tunnel.$(OBJEXT) tunnel2.$(OBJEXT) winpos.$(OBJEXT)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .obj .s
$(srcdir)/Makefile.in: # Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) $(top_srcdir)/common_rules.make
	cd $(top_srcdir) && $(AUTOMAKE) --gnu demos/Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-checkPROGRAMS:

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)

distclean-checkPROGRAMS:

maintainer-clean-checkPROGRAMS:

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

bounce$(EXEEXT): $(bounce_OBJECTS) $(bounce_DEPENDENCIES)
	@rm -f bounce$(EXEEXT)
	$(LINK) $(bounce_LDFLAGS) $(bounce_OBJECTS) $(bounce_LDADD) $(LIBS)

clearspd$(EXEEXT): $(clearspd_OBJECTS) $(clearspd_DEPENDENCIES)
	@rm -f clearspd$(EXEEXT)
	$(LINK) $(clearspd_LDFLAGS) $(clearspd_OBJECTS) $(clearspd_LDADD) $(LIBS)

cubemap$(EXEEXT): $(cubemap_OBJECTS) $(cubemap_DEPENDENCIES)
	@rm -f cubemap$(EXEEXT)
	$(LINK) $(cubemap_LDFLAGS) $(cubemap_OBJECTS) $(cubemap_LDADD) $(LIBS)

drawpix$(EXEEXT): $(drawpix_OBJECTS) $(drawpix_DEPENDENCIES)
	@rm -f drawpix$(EXEEXT)
	$(LINK) $(drawpix_LDFLAGS) $(drawpix_OBJECTS) $(drawpix_LDADD) $(LIBS)

fire$(EXEEXT): $(fire_OBJECTS) $(fire_DEPENDENCIES)
	@rm -f fire$(EXEEXT)
	$(LINK) $(fire_LDFLAGS) $(fire_OBJECTS) $(fire_LDADD) $(LIBS)

gamma$(EXEEXT): $(gamma_OBJECTS) $(gamma_DEPENDENCIES)
	@rm -f gamma$(EXEEXT)
	$(LINK) $(gamma_LDFLAGS) $(gamma_OBJECTS) $(gamma_LDADD) $(LIBS)

gears$(EXEEXT): $(gears_OBJECTS) $(gears_DEPENDENCIES)
	@rm -f gears$(EXEEXT)
	$(LINK) $(gears_LDFLAGS) $(gears_OBJECTS) $(gears_LDADD) $(LIBS)

geartrain$(EXEEXT): $(geartrain_OBJECTS) $(geartrain_DEPENDENCIES)
	@rm -f geartrain$(EXEEXT)
	$(LINK) $(geartrain_LDFLAGS) $(geartrain_OBJECTS) $(geartrain_LDADD) $(LIBS)

glinfo$(EXEEXT): $(glinfo_OBJECTS) $(glinfo_DEPENDENCIES)
	@rm -f glinfo$(EXEEXT)
	$(LINK) $(glinfo_LDFLAGS) $(glinfo_OBJECTS) $(glinfo_LDADD) $(LIBS)

gloss$(EXEEXT): $(gloss_OBJECTS) $(gloss_DEPENDENCIES)
	@rm -f gloss$(EXEEXT)
	$(LINK) $(gloss_LDFLAGS) $(gloss_OBJECTS) $(gloss_LDADD) $(LIBS)

gltestperf$(EXEEXT): $(gltestperf_OBJECTS) $(gltestperf_DEPENDENCIES)
	@rm -f gltestperf$(EXEEXT)
	$(LINK) $(gltestperf_LDFLAGS) $(gltestperf_OBJECTS) $(gltestperf_LDADD) $(LIBS)

glutfx$(EXEEXT): $(glutfx_OBJECTS) $(glutfx_DEPENDENCIES)
	@rm -f glutfx$(EXEEXT)
	$(LINK) $(glutfx_LDFLAGS) $(glutfx_OBJECTS) $(glutfx_LDADD) $(LIBS)

isosurf$(EXEEXT): $(isosurf_OBJECTS) $(isosurf_DEPENDENCIES)
	@rm -f isosurf$(EXEEXT)
	$(LINK) $(isosurf_LDFLAGS) $(isosurf_OBJECTS) $(isosurf_LDADD) $(LIBS)

ipers$(EXEEXT): $(ipers_OBJECTS) $(ipers_DEPENDENCIES)
	@rm -f ipers$(EXEEXT)
	$(LINK) $(ipers_LDFLAGS) $(ipers_OBJECTS) $(ipers_LDADD) $(LIBS)

lodbias$(EXEEXT): $(lodbias_OBJECTS) $(lodbias_DEPENDENCIES)
	@rm -f lodbias$(EXEEXT)
	$(LINK) $(lodbias_LDFLAGS) $(lodbias_OBJECTS) $(lodbias_LDADD) $(LIBS)

morph3d$(EXEEXT): $(morph3d_OBJECTS) $(morph3d_DEPENDENCIES)
	@rm -f morph3d$(EXEEXT)
	$(LINK) $(morph3d_LDFLAGS) $(morph3d_OBJECTS) $(morph3d_LDADD) $(LIBS)

multiarb$(EXEEXT): $(multiarb_OBJECTS) $(multiarb_DEPENDENCIES)
	@rm -f multiarb$(EXEEXT)
	$(LINK) $(multiarb_LDFLAGS) $(multiarb_OBJECTS) $(multiarb_LDADD) $(LIBS)

occlude$(EXEEXT): $(occlude_OBJECTS) $(occlude_DEPENDENCIES)
	@rm -f occlude$(EXEEXT)
	$(LINK) $(occlude_LDFLAGS) $(occlude_OBJECTS) $(occlude_LDADD) $(LIBS)

paltex$(EXEEXT): $(paltex_OBJECTS) $(paltex_DEPENDENCIES)
	@rm -f paltex$(EXEEXT)
	$(LINK) $(paltex_LDFLAGS) $(paltex_OBJECTS) $(paltex_LDADD) $(LIBS)

pixeltex$(EXEEXT): $(pixeltex_OBJECTS) $(pixeltex_DEPENDENCIES)
	@rm -f pixeltex$(EXEEXT)
	$(LINK) $(pixeltex_LDFLAGS) $(pixeltex_OBJECTS) $(pixeltex_LDADD) $(LIBS)

pointblast$(EXEEXT): $(pointblast_OBJECTS) $(pointblast_DEPENDENCIES)
	@rm -f pointblast$(EXEEXT)
	$(LINK) $(pointblast_LDFLAGS) $(pointblast_OBJECTS) $(pointblast_LDADD) $(LIBS)

ray$(EXEEXT): $(ray_OBJECTS) $(ray_DEPENDENCIES)
	@rm -f ray$(EXEEXT)
	$(LINK) $(ray_LDFLAGS) $(ray_OBJECTS) $(ray_LDADD) $(LIBS)

readpix$(EXEEXT): $(readpix_OBJECTS) $(readpix_DEPENDENCIES)
	@rm -f readpix$(EXEEXT)
	$(LINK) $(readpix_LDFLAGS) $(readpix_OBJECTS) $(readpix_LDADD) $(LIBS)

reflect$(EXEEXT): $(reflect_OBJECTS) $(reflect_DEPENDENCIES)
	@rm -f reflect$(EXEEXT)
	$(LINK) $(reflect_LDFLAGS) $(reflect_OBJECTS) $(reflect_LDADD) $(LIBS)

renormal$(EXEEXT): $(renormal_OBJECTS) $(renormal_DEPENDENCIES)
	@rm -f renormal$(EXEEXT)
	$(LINK) $(renormal_LDFLAGS) $(renormal_OBJECTS) $(renormal_LDADD) $(LIBS)

shadowtex$(EXEEXT): $(shadowtex_OBJECTS) $(shadowtex_DEPENDENCIES)
	@rm -f shadowtex$(EXEEXT)
	$(LINK) $(shadowtex_LDFLAGS) $(shadowtex_OBJECTS) $(shadowtex_LDADD) $(LIBS)

spectex$(EXEEXT): $(spectex_OBJECTS) $(spectex_DEPENDENCIES)
	@rm -f spectex$(EXEEXT)
	$(LINK) $(spectex_LDFLAGS) $(spectex_OBJECTS) $(spectex_LDADD) $(LIBS)

stex3d$(EXEEXT): $(stex3d_OBJECTS) $(stex3d_DEPENDENCIES)
	@rm -f stex3d$(EXEEXT)
	$(LINK) $(stex3d_LDFLAGS) $(stex3d_OBJECTS) $(stex3d_LDADD) $(LIBS)

teapot$(EXEEXT): $(teapot_OBJECTS) $(teapot_DEPENDENCIES)
	@rm -f teapot$(EXEEXT)
	$(LINK) $(teapot_LDFLAGS) $(teapot_OBJECTS) $(teapot_LDADD) $(LIBS)

terrain$(EXEEXT): $(terrain_OBJECTS) $(terrain_DEPENDENCIES)
	@rm -f terrain$(EXEEXT)
	$(LINK) $(terrain_LDFLAGS) $(terrain_OBJECTS) $(terrain_LDADD) $(LIBS)

tessdemo$(EXEEXT): $(tessdemo_OBJECTS) $(tessdemo_DEPENDENCIES)
	@rm -f tessdemo$(EXEEXT)
	$(LINK) $(tessdemo_LDFLAGS) $(tessdemo_OBJECTS) $(tessdemo_LDADD) $(LIBS)

texcyl$(EXEEXT): $(texcyl_OBJECTS) $(texcyl_DEPENDENCIES)
	@rm -f texcyl$(EXEEXT)
	$(LINK) $(texcyl_LDFLAGS) $(texcyl_OBJECTS) $(texcyl_LDADD) $(LIBS)

texdown$(EXEEXT): $(texdown_OBJECTS) $(texdown_DEPENDENCIES)
	@rm -f texdown$(EXEEXT)
	$(LINK) $(texdown_LDFLAGS) $(texdown_OBJECTS) $(texdown_LDADD) $(LIBS)

texenv$(EXEEXT): $(texenv_OBJECTS) $(texenv_DEPENDENCIES)
	@rm -f texenv$(EXEEXT)
	$(LINK) $(texenv_LDFLAGS) $(texenv_OBJECTS) $(texenv_LDADD) $(LIBS)

texobj$(EXEEXT): $(texobj_OBJECTS) $(texobj_DEPENDENCIES)
	@rm -f texobj$(EXEEXT)
	$(LINK) $(texobj_LDFLAGS) $(texobj_OBJECTS) $(texobj_LDADD) $(LIBS)

trispd$(EXEEXT): $(trispd_OBJECTS) $(trispd_DEPENDENCIES)
	@rm -f trispd$(EXEEXT)
	$(LINK) $(trispd_LDFLAGS) $(trispd_OBJECTS) $(trispd_LDADD) $(LIBS)

tunnel$(EXEEXT): $(tunnel_OBJECTS) $(tunnel_DEPENDENCIES)
	@rm -f tunnel$(EXEEXT)
	$(LINK) $(tunnel_LDFLAGS) $(tunnel_OBJECTS) $(tunnel_LDADD) $(LIBS)

tunnel2$(EXEEXT): $(tunnel2_OBJECTS) $(tunnel2_DEPENDENCIES)
	@rm -f tunnel2$(EXEEXT)
	$(LINK) $(tunnel2_LDFLAGS) $(tunnel2_OBJECTS) $(tunnel2_LDADD) $(LIBS)

winpos$(EXEEXT): $(winpos_OBJECTS) $(winpos_DEPENDENCIES)
	@rm -f winpos$(EXEEXT)
	$(LINK) $(winpos_LDFLAGS) $(winpos_OBJECTS) $(winpos_LDADD) $(LIBS)

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = demos

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu demos/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:
	-rm -rf .deps

maintainer-clean-depend:

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp
info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am:
install-exec: install-exec-am

install-data-am:
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am:
uninstall: uninstall-am
all-am: Makefile
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:


mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-checkPROGRAMS mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags mostlyclean-depend \
		mostlyclean-generic

mostlyclean: mostlyclean-am

clean-am:  clean-checkPROGRAMS clean-compile clean-libtool clean-tags \
		clean-depend clean-generic mostlyclean-am

clean: clean-am

distclean-am:  distclean-checkPROGRAMS distclean-compile \
		distclean-libtool distclean-tags distclean-depend \
		distclean-generic clean-am
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-checkPROGRAMS \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-checkPROGRAMS distclean-checkPROGRAMS \
clean-checkPROGRAMS maintainer-clean-checkPROGRAMS mostlyclean-compile \
distclean-compile clean-compile maintainer-clean-compile \
mostlyclean-libtool distclean-libtool clean-libtool \
maintainer-clean-libtool tags mostlyclean-tags distclean-tags \
clean-tags maintainer-clean-tags distdir mostlyclean-depend \
distclean-depend clean-depend maintainer-clean-depend info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-exec-am \
install-exec install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


# execute all programs
exec: $(check_PROGRAMS)
	@for prog in $(check_PROGRAMS);	\
	do				\
	 echo -n "Running $$prog ..." ;	\
	 case "$$prog" in		\
	 osdemo) ./$$prog test.ppm ;; 	\
	 stex3d) ./$$prog $(BUFFER) ;; 	\
	 *) ./$$prog ;;			\
	 esac ;				\
	 echo ;				\
	done

#%.o: %.c
#	@echo '$(COMPILE) -c $<'; \
#	$(COMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
#	@-cp .deps/$(*F).pp .deps/$(*F).P; \
#	tr ' ' '\012' < .deps/$(*F).pp \
#	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
#	    >> .deps/$(*F).P; \
#	rm .deps/$(*F).pp
#%.lo: %.c
#	@echo '$(LTCOMPILE) -c $<'; \
#	$(LTCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
#	@-sed -e 's/^\([^:]*\)\.o[      ]*:/\1.lo \1.o :/' \
#	  < .deps/$(*F).pp > .deps/$(*F).P; \
#	tr ' ' '\012' < .deps/$(*F).pp \
#	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
#	    >> .deps/$(*F).P; \
#	rm -f .deps/$(*F).pp
#%.o: %.cc
#	@echo '$(CXXCOMPILE) -c $<'; \
#	$(CXXCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
#	@-cp .deps/$(*F).pp .deps/$(*F).P; \
#	tr ' ' '\012' < .deps/$(*F).pp \
#	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
#	    >> .deps/$(*F).P; \
#	rm .deps/$(*F).pp
#%.lo: %.cc
#	@echo '$(LTCXXCOMPILE) -c $<'; \
#	$(LTCXXCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
#	@-sed -e 's/^\([^:]*\)\.o[      ]*:/\1.lo \1.o :/' \
#	  < .deps/$(*F).pp > .deps/$(*F).P; \
#	tr ' ' '\012' < .deps/$(*F).pp \
#	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
#	    >> .deps/$(*F).P; \
#	rm -f .deps/$(*F).pp

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
