# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = @host_alias@
host_triplet = @host@
AS = @AS@
CC = @CC@
CPP = @CPP@
CXX = @CXX@
DLLEXT = @DLLEXT@
DLLTOOL = @DLLTOOL@
ECHO = @ECHO@
EXEEXT = @EXEEXT@
FX_CFLAGS = @FX_CFLAGS@
FX_LIBS = @FX_LIBS@
GGI_CFLAGS = @GGI_CFLAGS@
GGI_LIBS = @GGI_LIBS@
GLUT_CFLAGS = @GLUT_CFLAGS@
GLUT_LIBS = @GLUT_LIBS@
GLU_DIR = @GLU_DIR@
LIBGLUT_VERSION_INFO = @LIBGLUT_VERSION_INFO@
LIBGLU_VERSION_INFO = @LIBGLU_VERSION_INFO@
LIBGL_VERSION_INFO = @LIBGL_VERSION_INFO@
LIBMESA_VERSION_INFO = @LIBMESA_VERSION_INFO@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MESA_MD_FLAG = @MESA_MD_FLAG@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
SI_GLU_VERSION_INFO = @SI_GLU_VERSION_INFO@
STRIP = @STRIP@
SVGA_CFLAGS = @SVGA_CFLAGS@
SVGA_LIBS = @SVGA_LIBS@
THREAD_LIBS = @THREAD_LIBS@
VERSION = @VERSION@
X_LIBADD = @X_LIBADD@
demo_dirs = @demo_dirs@
extra_includes = @extra_includes@
extra_libraries = @extra_libraries@
ggi_confdir = @ggi_confdir@
ggi_libdir = @ggi_libdir@
glut_dir = @glut_dir@
use_si_glu = @use_si_glu@

AUTOMAKE_OPTIONS = 

INCLUDES = -I$(top_srcdir)/include $(GLUT_CFLAGS)

check_PROGRAMS = aaindex aapoly aargb accanti accpersp alpha alpha3D anti 	bezcurve bezmesh checker clip colormat cube depthcue dof 	double drawf feedback fog fogindex font hello image light 	lines list material mipmap model movelight nurbs pickdepth 	picksquare plane planet polyoff polys quadric robot sccolorlight 	scene scenebamb sceneflat select smooth stencil stroke surface 	teaambient teapots tess tesswind texbind texgen texprox texsub 	texturesurf torus trim unproject varray wrap 


EXTRA_DIST = jitter.h

LDADD = $(GLUT_LIBS) $(top_builddir)/$(GLU_DIR)/libGLU.la 	$(top_builddir)/src/libGL.la -lm

mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../conf.h
CONFIG_CLEAN_FILES = 
check_PROGRAMS =  aaindex$(EXEEXT) aapoly$(EXEEXT) aargb$(EXEEXT) \
accanti$(EXEEXT) accpersp$(EXEEXT) alpha$(EXEEXT) alpha3D$(EXEEXT) \
anti$(EXEEXT) bezcurve$(EXEEXT) bezmesh$(EXEEXT) checker$(EXEEXT) \
clip$(EXEEXT) colormat$(EXEEXT) cube$(EXEEXT) depthcue$(EXEEXT) \
dof$(EXEEXT) double$(EXEEXT) drawf$(EXEEXT) feedback$(EXEEXT) \
fog$(EXEEXT) fogindex$(EXEEXT) font$(EXEEXT) hello$(EXEEXT) \
image$(EXEEXT) light$(EXEEXT) lines$(EXEEXT) list$(EXEEXT) \
material$(EXEEXT) mipmap$(EXEEXT) model$(EXEEXT) movelight$(EXEEXT) \
nurbs$(EXEEXT) pickdepth$(EXEEXT) picksquare$(EXEEXT) plane$(EXEEXT) \
planet$(EXEEXT) polyoff$(EXEEXT) polys$(EXEEXT) quadric$(EXEEXT) \
robot$(EXEEXT) sccolorlight$(EXEEXT) scene$(EXEEXT) scenebamb$(EXEEXT) \
sceneflat$(EXEEXT) select$(EXEEXT) smooth$(EXEEXT) stencil$(EXEEXT) \
stroke$(EXEEXT) surface$(EXEEXT) teaambient$(EXEEXT) teapots$(EXEEXT) \
tess$(EXEEXT) tesswind$(EXEEXT) texbind$(EXEEXT) texgen$(EXEEXT) \
texprox$(EXEEXT) texsub$(EXEEXT) texturesurf$(EXEEXT) torus$(EXEEXT) \
trim$(EXEEXT) unproject$(EXEEXT) varray$(EXEEXT) wrap$(EXEEXT)

DEFS = @DEFS@ -I. -I$(srcdir) -I..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
X_CFLAGS = @X_CFLAGS@
X_LIBS = @X_LIBS@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_PRE_LIBS = @X_PRE_LIBS@
aaindex_SOURCES = aaindex.c
aaindex_OBJECTS =  aaindex.$(OBJEXT)
aaindex_LDADD = $(LDADD)
aaindex_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
aaindex_LDFLAGS = 
aapoly_SOURCES = aapoly.c
aapoly_OBJECTS =  aapoly.$(OBJEXT)
aapoly_LDADD = $(LDADD)
aapoly_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
aapoly_LDFLAGS = 
aargb_SOURCES = aargb.c
aargb_OBJECTS =  aargb.$(OBJEXT)
aargb_LDADD = $(LDADD)
aargb_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
aargb_LDFLAGS = 
accanti_SOURCES = accanti.c
accanti_OBJECTS =  accanti.$(OBJEXT)
accanti_LDADD = $(LDADD)
accanti_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
accanti_LDFLAGS = 
accpersp_SOURCES = accpersp.c
accpersp_OBJECTS =  accpersp.$(OBJEXT)
accpersp_LDADD = $(LDADD)
accpersp_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
accpersp_LDFLAGS = 
alpha_SOURCES = alpha.c
alpha_OBJECTS =  alpha.$(OBJEXT)
alpha_LDADD = $(LDADD)
alpha_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
alpha_LDFLAGS = 
alpha3D_SOURCES = alpha3D.c
alpha3D_OBJECTS =  alpha3D.$(OBJEXT)
alpha3D_LDADD = $(LDADD)
alpha3D_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
alpha3D_LDFLAGS = 
anti_SOURCES = anti.c
anti_OBJECTS =  anti.$(OBJEXT)
anti_LDADD = $(LDADD)
anti_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
anti_LDFLAGS = 
bezcurve_SOURCES = bezcurve.c
bezcurve_OBJECTS =  bezcurve.$(OBJEXT)
bezcurve_LDADD = $(LDADD)
bezcurve_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
bezcurve_LDFLAGS = 
bezmesh_SOURCES = bezmesh.c
bezmesh_OBJECTS =  bezmesh.$(OBJEXT)
bezmesh_LDADD = $(LDADD)
bezmesh_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
bezmesh_LDFLAGS = 
checker_SOURCES = checker.c
checker_OBJECTS =  checker.$(OBJEXT)
checker_LDADD = $(LDADD)
checker_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
checker_LDFLAGS = 
clip_SOURCES = clip.c
clip_OBJECTS =  clip.$(OBJEXT)
clip_LDADD = $(LDADD)
clip_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
clip_LDFLAGS = 
colormat_SOURCES = colormat.c
colormat_OBJECTS =  colormat.$(OBJEXT)
colormat_LDADD = $(LDADD)
colormat_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
colormat_LDFLAGS = 
cube_SOURCES = cube.c
cube_OBJECTS =  cube.$(OBJEXT)
cube_LDADD = $(LDADD)
cube_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
cube_LDFLAGS = 
depthcue_SOURCES = depthcue.c
depthcue_OBJECTS =  depthcue.$(OBJEXT)
depthcue_LDADD = $(LDADD)
depthcue_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
depthcue_LDFLAGS = 
dof_SOURCES = dof.c
dof_OBJECTS =  dof.$(OBJEXT)
dof_LDADD = $(LDADD)
dof_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
dof_LDFLAGS = 
double_SOURCES = double.c
double_OBJECTS =  double.$(OBJEXT)
double_LDADD = $(LDADD)
double_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
double_LDFLAGS = 
drawf_SOURCES = drawf.c
drawf_OBJECTS =  drawf.$(OBJEXT)
drawf_LDADD = $(LDADD)
drawf_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
drawf_LDFLAGS = 
feedback_SOURCES = feedback.c
feedback_OBJECTS =  feedback.$(OBJEXT)
feedback_LDADD = $(LDADD)
feedback_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
feedback_LDFLAGS = 
fog_SOURCES = fog.c
fog_OBJECTS =  fog.$(OBJEXT)
fog_LDADD = $(LDADD)
fog_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
fog_LDFLAGS = 
fogindex_SOURCES = fogindex.c
fogindex_OBJECTS =  fogindex.$(OBJEXT)
fogindex_LDADD = $(LDADD)
fogindex_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
fogindex_LDFLAGS = 
font_SOURCES = font.c
font_OBJECTS =  font.$(OBJEXT)
font_LDADD = $(LDADD)
font_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
font_LDFLAGS = 
hello_SOURCES = hello.c
hello_OBJECTS =  hello.$(OBJEXT)
hello_LDADD = $(LDADD)
hello_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
hello_LDFLAGS = 
image_SOURCES = image.c
image_OBJECTS =  image.$(OBJEXT)
image_LDADD = $(LDADD)
image_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
image_LDFLAGS = 
light_SOURCES = light.c
light_OBJECTS =  light.$(OBJEXT)
light_LDADD = $(LDADD)
light_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
light_LDFLAGS = 
lines_SOURCES = lines.c
lines_OBJECTS =  lines.$(OBJEXT)
lines_LDADD = $(LDADD)
lines_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
lines_LDFLAGS = 
list_SOURCES = list.c
list_OBJECTS =  list.$(OBJEXT)
list_LDADD = $(LDADD)
list_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
list_LDFLAGS = 
material_SOURCES = material.c
material_OBJECTS =  material.$(OBJEXT)
material_LDADD = $(LDADD)
material_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
material_LDFLAGS = 
mipmap_SOURCES = mipmap.c
mipmap_OBJECTS =  mipmap.$(OBJEXT)
mipmap_LDADD = $(LDADD)
mipmap_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
mipmap_LDFLAGS = 
model_SOURCES = model.c
model_OBJECTS =  model.$(OBJEXT)
model_LDADD = $(LDADD)
model_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
model_LDFLAGS = 
movelight_SOURCES = movelight.c
movelight_OBJECTS =  movelight.$(OBJEXT)
movelight_LDADD = $(LDADD)
movelight_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
movelight_LDFLAGS = 
nurbs_SOURCES = nurbs.c
nurbs_OBJECTS =  nurbs.$(OBJEXT)
nurbs_LDADD = $(LDADD)
nurbs_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
nurbs_LDFLAGS = 
pickdepth_SOURCES = pickdepth.c
pickdepth_OBJECTS =  pickdepth.$(OBJEXT)
pickdepth_LDADD = $(LDADD)
pickdepth_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
pickdepth_LDFLAGS = 
picksquare_SOURCES = picksquare.c
picksquare_OBJECTS =  picksquare.$(OBJEXT)
picksquare_LDADD = $(LDADD)
picksquare_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
picksquare_LDFLAGS = 
plane_SOURCES = plane.c
plane_OBJECTS =  plane.$(OBJEXT)
plane_LDADD = $(LDADD)
plane_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
plane_LDFLAGS = 
planet_SOURCES = planet.c
planet_OBJECTS =  planet.$(OBJEXT)
planet_LDADD = $(LDADD)
planet_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
planet_LDFLAGS = 
polyoff_SOURCES = polyoff.c
polyoff_OBJECTS =  polyoff.$(OBJEXT)
polyoff_LDADD = $(LDADD)
polyoff_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
polyoff_LDFLAGS = 
polys_SOURCES = polys.c
polys_OBJECTS =  polys.$(OBJEXT)
polys_LDADD = $(LDADD)
polys_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
polys_LDFLAGS = 
quadric_SOURCES = quadric.c
quadric_OBJECTS =  quadric.$(OBJEXT)
quadric_LDADD = $(LDADD)
quadric_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
quadric_LDFLAGS = 
robot_SOURCES = robot.c
robot_OBJECTS =  robot.$(OBJEXT)
robot_LDADD = $(LDADD)
robot_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
robot_LDFLAGS = 
sccolorlight_SOURCES = sccolorlight.c
sccolorlight_OBJECTS =  sccolorlight.$(OBJEXT)
sccolorlight_LDADD = $(LDADD)
sccolorlight_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
sccolorlight_LDFLAGS = 
scene_SOURCES = scene.c
scene_OBJECTS =  scene.$(OBJEXT)
scene_LDADD = $(LDADD)
scene_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
scene_LDFLAGS = 
scenebamb_SOURCES = scenebamb.c
scenebamb_OBJECTS =  scenebamb.$(OBJEXT)
scenebamb_LDADD = $(LDADD)
scenebamb_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
scenebamb_LDFLAGS = 
sceneflat_SOURCES = sceneflat.c
sceneflat_OBJECTS =  sceneflat.$(OBJEXT)
sceneflat_LDADD = $(LDADD)
sceneflat_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
sceneflat_LDFLAGS = 
select_SOURCES = select.c
select_OBJECTS =  select.$(OBJEXT)
select_LDADD = $(LDADD)
select_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
select_LDFLAGS = 
smooth_SOURCES = smooth.c
smooth_OBJECTS =  smooth.$(OBJEXT)
smooth_LDADD = $(LDADD)
smooth_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
smooth_LDFLAGS = 
stencil_SOURCES = stencil.c
stencil_OBJECTS =  stencil.$(OBJEXT)
stencil_LDADD = $(LDADD)
stencil_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
stencil_LDFLAGS = 
stroke_SOURCES = stroke.c
stroke_OBJECTS =  stroke.$(OBJEXT)
stroke_LDADD = $(LDADD)
stroke_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
stroke_LDFLAGS = 
surface_SOURCES = surface.c
surface_OBJECTS =  surface.$(OBJEXT)
surface_LDADD = $(LDADD)
surface_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
surface_LDFLAGS = 
teaambient_SOURCES = teaambient.c
teaambient_OBJECTS =  teaambient.$(OBJEXT)
teaambient_LDADD = $(LDADD)
teaambient_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
teaambient_LDFLAGS = 
teapots_SOURCES = teapots.c
teapots_OBJECTS =  teapots.$(OBJEXT)
teapots_LDADD = $(LDADD)
teapots_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
teapots_LDFLAGS = 
tess_SOURCES = tess.c
tess_OBJECTS =  tess.$(OBJEXT)
tess_LDADD = $(LDADD)
tess_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
tess_LDFLAGS = 
tesswind_SOURCES = tesswind.c
tesswind_OBJECTS =  tesswind.$(OBJEXT)
tesswind_LDADD = $(LDADD)
tesswind_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
tesswind_LDFLAGS = 
texbind_SOURCES = texbind.c
texbind_OBJECTS =  texbind.$(OBJEXT)
texbind_LDADD = $(LDADD)
texbind_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texbind_LDFLAGS = 
texgen_SOURCES = texgen.c
texgen_OBJECTS =  texgen.$(OBJEXT)
texgen_LDADD = $(LDADD)
texgen_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texgen_LDFLAGS = 
texprox_SOURCES = texprox.c
texprox_OBJECTS =  texprox.$(OBJEXT)
texprox_LDADD = $(LDADD)
texprox_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texprox_LDFLAGS = 
texsub_SOURCES = texsub.c
texsub_OBJECTS =  texsub.$(OBJEXT)
texsub_LDADD = $(LDADD)
texsub_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texsub_LDFLAGS = 
texturesurf_SOURCES = texturesurf.c
texturesurf_OBJECTS =  texturesurf.$(OBJEXT)
texturesurf_LDADD = $(LDADD)
texturesurf_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texturesurf_LDFLAGS = 
torus_SOURCES = torus.c
torus_OBJECTS =  torus.$(OBJEXT)
torus_LDADD = $(LDADD)
torus_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
torus_LDFLAGS = 
trim_SOURCES = trim.c
trim_OBJECTS =  trim.$(OBJEXT)
trim_LDADD = $(LDADD)
trim_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
trim_LDFLAGS = 
unproject_SOURCES = unproject.c
unproject_OBJECTS =  unproject.$(OBJEXT)
unproject_LDADD = $(LDADD)
unproject_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
unproject_LDFLAGS = 
varray_SOURCES = varray.c
varray_OBJECTS =  varray.$(OBJEXT)
varray_LDADD = $(LDADD)
varray_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
varray_LDFLAGS = 
wrap_SOURCES = wrap.c
wrap_OBJECTS =  wrap.$(OBJEXT)
wrap_LDADD = $(LDADD)
wrap_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
wrap_LDFLAGS = 
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@
DIST_COMMON =  README Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = gtar
GZIP_ENV = --best
DEP_FILES =  .deps/aaindex.P .deps/aapoly.P .deps/aargb.P \
.deps/accanti.P .deps/accpersp.P .deps/alpha.P .deps/alpha3D.P \
.deps/anti.P .deps/bezcurve.P .deps/bezmesh.P .deps/checker.P \
.deps/clip.P .deps/colormat.P .deps/cube.P .deps/depthcue.P .deps/dof.P \
.deps/double.P .deps/drawf.P .deps/feedback.P .deps/fog.P \
.deps/fogindex.P .deps/font.P .deps/hello.P .deps/image.P .deps/light.P \
.deps/lines.P .deps/list.P .deps/material.P .deps/mipmap.P \
.deps/model.P .deps/movelight.P .deps/nurbs.P .deps/pickdepth.P \
.deps/picksquare.P .deps/plane.P .deps/planet.P .deps/polyoff.P \
.deps/polys.P .deps/quadric.P .deps/robot.P .deps/sccolorlight.P \
.deps/scene.P .deps/scenebamb.P .deps/sceneflat.P .deps/select.P \
.deps/smooth.P .deps/stencil.P .deps/stroke.P .deps/surface.P \
.deps/teaambient.P .deps/teapots.P .deps/tess.P .deps/tesswind.P \
.deps/texbind.P .deps/texgen.P .deps/texprox.P .deps/texsub.P \
.deps/texturesurf.P .deps/torus.P .deps/trim.P .deps/unproject.P \
.deps/varray.P .deps/wrap.P
SOURCES = aaindex.c aapoly.c aargb.c accanti.c accpersp.c alpha.c alpha3D.c anti.c bezcurve.c bezmesh.c checker.c clip.c colormat.c cube.c depthcue.c dof.c double.c drawf.c feedback.c fog.c fogindex.c font.c hello.c image.c light.c lines.c list.c material.c mipmap.c model.c movelight.c nurbs.c pickdepth.c picksquare.c plane.c planet.c polyoff.c polys.c quadric.c robot.c sccolorlight.c scene.c scenebamb.c sceneflat.c select.c smooth.c stencil.c stroke.c surface.c teaambient.c teapots.c tess.c tesswind.c texbind.c texgen.c texprox.c texsub.c texturesurf.c torus.c trim.c unproject.c varray.c wrap.c
OBJECTS = aaindex.$(OBJEXT) aapoly.$(OBJEXT) aargb.$(OBJEXT) accanti.$(OBJEXT) accpersp.$(OBJEXT) alpha.$(OBJEXT) alpha3D.$(OBJEXT) anti.$(OBJEXT) bezcurve.$(OBJEXT) bezmesh.$(OBJEXT) checker.$(OBJEXT) clip.$(OBJEXT) colormat.$(OBJEXT) cube.$(OBJEXT) depthcue.$(OBJEXT) dof.$(OBJEXT) double.$(OBJEXT) drawf.$(OBJEXT) feedback.$(OBJEXT) fog.$(OBJEXT) fogindex.$(OBJEXT) font.$(OBJEXT) hello.$(OBJEXT) image.$(OBJEXT) light.$(OBJEXT) lines.$(OBJEXT) list.$(OBJEXT) material.$(OBJEXT) mipmap.$(OBJEXT) model.$(OBJEXT) movelight.$(OBJEXT) nurbs.$(OBJEXT) pickdepth.$(OBJEXT) picksquare.$(OBJEXT) plane.$(OBJEXT) planet.$(OBJEXT) polyoff.$(OBJEXT) polys.$(OBJEXT) quadric.$(OBJEXT) robot.$(OBJEXT) sccolorlight.$(OBJEXT) scene.$(OBJEXT) scenebamb.$(OBJEXT) sceneflat.$(OBJEXT) select.$(OBJEXT) smooth.$(OBJEXT) stencil.$(OBJEXT) stroke.$(OBJEXT) surface.$(OBJEXT) teaambient.$(OBJEXT) teapots.$(OBJEXT) tess.$(OBJEXT) tesswind.$(OBJEXT) texbind.$(OBJEXT) texgen.$(OBJEXT) texprox.$(OBJEXT) texsub.$(OBJEXT) texturesurf.$(OBJEXT) torus.$(OBJEXT) trim.$(OBJEXT) unproject.$(OBJEXT) varray.$(OBJEXT) wrap.$(OBJEXT)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .obj .s
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) $(top_srcdir)/common_rules.make
	cd $(top_srcdir) && $(AUTOMAKE) --gnu book/Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-checkPROGRAMS:

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)

distclean-checkPROGRAMS:

maintainer-clean-checkPROGRAMS:

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

aaindex$(EXEEXT): $(aaindex_OBJECTS) $(aaindex_DEPENDENCIES)
	@rm -f aaindex$(EXEEXT)
	$(LINK) $(aaindex_LDFLAGS) $(aaindex_OBJECTS) $(aaindex_LDADD) $(LIBS)

aapoly$(EXEEXT): $(aapoly_OBJECTS) $(aapoly_DEPENDENCIES)
	@rm -f aapoly$(EXEEXT)
	$(LINK) $(aapoly_LDFLAGS) $(aapoly_OBJECTS) $(aapoly_LDADD) $(LIBS)

aargb$(EXEEXT): $(aargb_OBJECTS) $(aargb_DEPENDENCIES)
	@rm -f aargb$(EXEEXT)
	$(LINK) $(aargb_LDFLAGS) $(aargb_OBJECTS) $(aargb_LDADD) $(LIBS)

accanti$(EXEEXT): $(accanti_OBJECTS) $(accanti_DEPENDENCIES)
	@rm -f accanti$(EXEEXT)
	$(LINK) $(accanti_LDFLAGS) $(accanti_OBJECTS) $(accanti_LDADD) $(LIBS)

accpersp$(EXEEXT): $(accpersp_OBJECTS) $(accpersp_DEPENDENCIES)
	@rm -f accpersp$(EXEEXT)
	$(LINK) $(accpersp_LDFLAGS) $(accpersp_OBJECTS) $(accpersp_LDADD) $(LIBS)

alpha$(EXEEXT): $(alpha_OBJECTS) $(alpha_DEPENDENCIES)
	@rm -f alpha$(EXEEXT)
	$(LINK) $(alpha_LDFLAGS) $(alpha_OBJECTS) $(alpha_LDADD) $(LIBS)

alpha3D$(EXEEXT): $(alpha3D_OBJECTS) $(alpha3D_DEPENDENCIES)
	@rm -f alpha3D$(EXEEXT)
	$(LINK) $(alpha3D_LDFLAGS) $(alpha3D_OBJECTS) $(alpha3D_LDADD) $(LIBS)

anti$(EXEEXT): $(anti_OBJECTS) $(anti_DEPENDENCIES)
	@rm -f anti$(EXEEXT)
	$(LINK) $(anti_LDFLAGS) $(anti_OBJECTS) $(anti_LDADD) $(LIBS)

bezcurve$(EXEEXT): $(bezcurve_OBJECTS) $(bezcurve_DEPENDENCIES)
	@rm -f bezcurve$(EXEEXT)
	$(LINK) $(bezcurve_LDFLAGS) $(bezcurve_OBJECTS) $(bezcurve_LDADD) $(LIBS)

bezmesh$(EXEEXT): $(bezmesh_OBJECTS) $(bezmesh_DEPENDENCIES)
	@rm -f bezmesh$(EXEEXT)
	$(LINK) $(bezmesh_LDFLAGS) $(bezmesh_OBJECTS) $(bezmesh_LDADD) $(LIBS)

checker$(EXEEXT): $(checker_OBJECTS) $(checker_DEPENDENCIES)
	@rm -f checker$(EXEEXT)
	$(LINK) $(checker_LDFLAGS) $(checker_OBJECTS) $(checker_LDADD) $(LIBS)

clip$(EXEEXT): $(clip_OBJECTS) $(clip_DEPENDENCIES)
	@rm -f clip$(EXEEXT)
	$(LINK) $(clip_LDFLAGS) $(clip_OBJECTS) $(clip_LDADD) $(LIBS)

colormat$(EXEEXT): $(colormat_OBJECTS) $(colormat_DEPENDENCIES)
	@rm -f colormat$(EXEEXT)
	$(LINK) $(colormat_LDFLAGS) $(colormat_OBJECTS) $(colormat_LDADD) $(LIBS)

cube$(EXEEXT): $(cube_OBJECTS) $(cube_DEPENDENCIES)
	@rm -f cube$(EXEEXT)
	$(LINK) $(cube_LDFLAGS) $(cube_OBJECTS) $(cube_LDADD) $(LIBS)

depthcue$(EXEEXT): $(depthcue_OBJECTS) $(depthcue_DEPENDENCIES)
	@rm -f depthcue$(EXEEXT)
	$(LINK) $(depthcue_LDFLAGS) $(depthcue_OBJECTS) $(depthcue_LDADD) $(LIBS)

dof$(EXEEXT): $(dof_OBJECTS) $(dof_DEPENDENCIES)
	@rm -f dof$(EXEEXT)
	$(LINK) $(dof_LDFLAGS) $(dof_OBJECTS) $(dof_LDADD) $(LIBS)

double$(EXEEXT): $(double_OBJECTS) $(double_DEPENDENCIES)
	@rm -f double$(EXEEXT)
	$(LINK) $(double_LDFLAGS) $(double_OBJECTS) $(double_LDADD) $(LIBS)

drawf$(EXEEXT): $(drawf_OBJECTS) $(drawf_DEPENDENCIES)
	@rm -f drawf$(EXEEXT)
	$(LINK) $(drawf_LDFLAGS) $(drawf_OBJECTS) $(drawf_LDADD) $(LIBS)

feedback$(EXEEXT): $(feedback_OBJECTS) $(feedback_DEPENDENCIES)
	@rm -f feedback$(EXEEXT)
	$(LINK) $(feedback_LDFLAGS) $(feedback_OBJECTS) $(feedback_LDADD) $(LIBS)

fog$(EXEEXT): $(fog_OBJECTS) $(fog_DEPENDENCIES)
	@rm -f fog$(EXEEXT)
	$(LINK) $(fog_LDFLAGS) $(fog_OBJECTS) $(fog_LDADD) $(LIBS)

fogindex$(EXEEXT): $(fogindex_OBJECTS) $(fogindex_DEPENDENCIES)
	@rm -f fogindex$(EXEEXT)
	$(LINK) $(fogindex_LDFLAGS) $(fogindex_OBJECTS) $(fogindex_LDADD) $(LIBS)

font$(EXEEXT): $(font_OBJECTS) $(font_DEPENDENCIES)
	@rm -f font$(EXEEXT)
	$(LINK) $(font_LDFLAGS) $(font_OBJECTS) $(font_LDADD) $(LIBS)

hello$(EXEEXT): $(hello_OBJECTS) $(hello_DEPENDENCIES)
	@rm -f hello$(EXEEXT)
	$(LINK) $(hello_LDFLAGS) $(hello_OBJECTS) $(hello_LDADD) $(LIBS)

image$(EXEEXT): $(image_OBJECTS) $(image_DEPENDENCIES)
	@rm -f image$(EXEEXT)
	$(LINK) $(image_LDFLAGS) $(image_OBJECTS) $(image_LDADD) $(LIBS)

light$(EXEEXT): $(light_OBJECTS) $(light_DEPENDENCIES)
	@rm -f light$(EXEEXT)
	$(LINK) $(light_LDFLAGS) $(light_OBJECTS) $(light_LDADD) $(LIBS)

lines$(EXEEXT): $(lines_OBJECTS) $(lines_DEPENDENCIES)
	@rm -f lines$(EXEEXT)
	$(LINK) $(lines_LDFLAGS) $(lines_OBJECTS) $(lines_LDADD) $(LIBS)

list$(EXEEXT): $(list_OBJECTS) $(list_DEPENDENCIES)
	@rm -f list$(EXEEXT)
	$(LINK) $(list_LDFLAGS) $(list_OBJECTS) $(list_LDADD) $(LIBS)

material$(EXEEXT): $(material_OBJECTS) $(material_DEPENDENCIES)
	@rm -f material$(EXEEXT)
	$(LINK) $(material_LDFLAGS) $(material_OBJECTS) $(material_LDADD) $(LIBS)

mipmap$(EXEEXT): $(mipmap_OBJECTS) $(mipmap_DEPENDENCIES)
	@rm -f mipmap$(EXEEXT)
	$(LINK) $(mipmap_LDFLAGS) $(mipmap_OBJECTS) $(mipmap_LDADD) $(LIBS)

model$(EXEEXT): $(model_OBJECTS) $(model_DEPENDENCIES)
	@rm -f model$(EXEEXT)
	$(LINK) $(model_LDFLAGS) $(model_OBJECTS) $(model_LDADD) $(LIBS)

movelight$(EXEEXT): $(movelight_OBJECTS) $(movelight_DEPENDENCIES)
	@rm -f movelight$(EXEEXT)
	$(LINK) $(movelight_LDFLAGS) $(movelight_OBJECTS) $(movelight_LDADD) $(LIBS)

nurbs$(EXEEXT): $(nurbs_OBJECTS) $(nurbs_DEPENDENCIES)
	@rm -f nurbs$(EXEEXT)
	$(LINK) $(nurbs_LDFLAGS) $(nurbs_OBJECTS) $(nurbs_LDADD) $(LIBS)

pickdepth$(EXEEXT): $(pickdepth_OBJECTS) $(pickdepth_DEPENDENCIES)
	@rm -f pickdepth$(EXEEXT)
	$(LINK) $(pickdepth_LDFLAGS) $(pickdepth_OBJECTS) $(pickdepth_LDADD) $(LIBS)

picksquare$(EXEEXT): $(picksquare_OBJECTS) $(picksquare_DEPENDENCIES)
	@rm -f picksquare$(EXEEXT)
	$(LINK) $(picksquare_LDFLAGS) $(picksquare_OBJECTS) $(picksquare_LDADD) $(LIBS)

plane$(EXEEXT): $(plane_OBJECTS) $(plane_DEPENDENCIES)
	@rm -f plane$(EXEEXT)
	$(LINK) $(plane_LDFLAGS) $(plane_OBJECTS) $(plane_LDADD) $(LIBS)

planet$(EXEEXT): $(planet_OBJECTS) $(planet_DEPENDENCIES)
	@rm -f planet$(EXEEXT)
	$(LINK) $(planet_LDFLAGS) $(planet_OBJECTS) $(planet_LDADD) $(LIBS)

polyoff$(EXEEXT): $(polyoff_OBJECTS) $(polyoff_DEPENDENCIES)
	@rm -f polyoff$(EXEEXT)
	$(LINK) $(polyoff_LDFLAGS) $(polyoff_OBJECTS) $(polyoff_LDADD) $(LIBS)

polys$(EXEEXT): $(polys_OBJECTS) $(polys_DEPENDENCIES)
	@rm -f polys$(EXEEXT)
	$(LINK) $(polys_LDFLAGS) $(polys_OBJECTS) $(polys_LDADD) $(LIBS)

quadric$(EXEEXT): $(quadric_OBJECTS) $(quadric_DEPENDENCIES)
	@rm -f quadric$(EXEEXT)
	$(LINK) $(quadric_LDFLAGS) $(quadric_OBJECTS) $(quadric_LDADD) $(LIBS)

robot$(EXEEXT): $(robot_OBJECTS) $(robot_DEPENDENCIES)
	@rm -f robot$(EXEEXT)
	$(LINK) $(robot_LDFLAGS) $(robot_OBJECTS) $(robot_LDADD) $(LIBS)

sccolorlight$(EXEEXT): $(sccolorlight_OBJECTS) $(sccolorlight_DEPENDENCIES)
	@rm -f sccolorlight$(EXEEXT)
	$(LINK) $(sccolorlight_LDFLAGS) $(sccolorlight_OBJECTS) $(sccolorlight_LDADD) $(LIBS)

scene$(EXEEXT): $(scene_OBJECTS) $(scene_DEPENDENCIES)
	@rm -f scene$(EXEEXT)
	$(LINK) $(scene_LDFLAGS) $(scene_OBJECTS) $(scene_LDADD) $(LIBS)

scenebamb$(EXEEXT): $(scenebamb_OBJECTS) $(scenebamb_DEPENDENCIES)
	@rm -f scenebamb$(EXEEXT)
	$(LINK) $(scenebamb_LDFLAGS) $(scenebamb_OBJECTS) $(scenebamb_LDADD) $(LIBS)

sceneflat$(EXEEXT): $(sceneflat_OBJECTS) $(sceneflat_DEPENDENCIES)
	@rm -f sceneflat$(EXEEXT)
	$(LINK) $(sceneflat_LDFLAGS) $(sceneflat_OBJECTS) $(sceneflat_LDADD) $(LIBS)

select$(EXEEXT): $(select_OBJECTS) $(select_DEPENDENCIES)
	@rm -f select$(EXEEXT)
	$(LINK) $(select_LDFLAGS) $(select_OBJECTS) $(select_LDADD) $(LIBS)

smooth$(EXEEXT): $(smooth_OBJECTS) $(smooth_DEPENDENCIES)
	@rm -f smooth$(EXEEXT)
	$(LINK) $(smooth_LDFLAGS) $(smooth_OBJECTS) $(smooth_LDADD) $(LIBS)

stencil$(EXEEXT): $(stencil_OBJECTS) $(stencil_DEPENDENCIES)
	@rm -f stencil$(EXEEXT)
	$(LINK) $(stencil_LDFLAGS) $(stencil_OBJECTS) $(stencil_LDADD) $(LIBS)

stroke$(EXEEXT): $(stroke_OBJECTS) $(stroke_DEPENDENCIES)
	@rm -f stroke$(EXEEXT)
	$(LINK) $(stroke_LDFLAGS) $(stroke_OBJECTS) $(stroke_LDADD) $(LIBS)

surface$(EXEEXT): $(surface_OBJECTS) $(surface_DEPENDENCIES)
	@rm -f surface$(EXEEXT)
	$(LINK) $(surface_LDFLAGS) $(surface_OBJECTS) $(surface_LDADD) $(LIBS)

teaambient$(EXEEXT): $(teaambient_OBJECTS) $(teaambient_DEPENDENCIES)
	@rm -f teaambient$(EXEEXT)
	$(LINK) $(teaambient_LDFLAGS) $(teaambient_OBJECTS) $(teaambient_LDADD) $(LIBS)

teapots$(EXEEXT): $(teapots_OBJECTS) $(teapots_DEPENDENCIES)
	@rm -f teapots$(EXEEXT)
	$(LINK) $(teapots_LDFLAGS) $(teapots_OBJECTS) $(teapots_LDADD) $(LIBS)

tess$(EXEEXT): $(tess_OBJECTS) $(tess_DEPENDENCIES)
	@rm -f tess$(EXEEXT)
	$(LINK) $(tess_LDFLAGS) $(tess_OBJECTS) $(tess_LDADD) $(LIBS)

tesswind$(EXEEXT): $(tesswind_OBJECTS) $(tesswind_DEPENDENCIES)
	@rm -f tesswind$(EXEEXT)
	$(LINK) $(tesswind_LDFLAGS) $(tesswind_OBJECTS) $(tesswind_LDADD) $(LIBS)

texbind$(EXEEXT): $(texbind_OBJECTS) $(texbind_DEPENDENCIES)
	@rm -f texbind$(EXEEXT)
	$(LINK) $(texbind_LDFLAGS) $(texbind_OBJECTS) $(texbind_LDADD) $(LIBS)

texgen$(EXEEXT): $(texgen_OBJECTS) $(texgen_DEPENDENCIES)
	@rm -f texgen$(EXEEXT)
	$(LINK) $(texgen_LDFLAGS) $(texgen_OBJECTS) $(texgen_LDADD) $(LIBS)

texprox$(EXEEXT): $(texprox_OBJECTS) $(texprox_DEPENDENCIES)
	@rm -f texprox$(EXEEXT)
	$(LINK) $(texprox_LDFLAGS) $(texprox_OBJECTS) $(texprox_LDADD) $(LIBS)

texsub$(EXEEXT): $(texsub_OBJECTS) $(texsub_DEPENDENCIES)
	@rm -f texsub$(EXEEXT)
	$(LINK) $(texsub_LDFLAGS) $(texsub_OBJECTS) $(texsub_LDADD) $(LIBS)

texturesurf$(EXEEXT): $(texturesurf_OBJECTS) $(texturesurf_DEPENDENCIES)
	@rm -f texturesurf$(EXEEXT)
	$(LINK) $(texturesurf_LDFLAGS) $(texturesurf_OBJECTS) $(texturesurf_LDADD) $(LIBS)

torus$(EXEEXT): $(torus_OBJECTS) $(torus_DEPENDENCIES)
	@rm -f torus$(EXEEXT)
	$(LINK) $(torus_LDFLAGS) $(torus_OBJECTS) $(torus_LDADD) $(LIBS)

trim$(EXEEXT): $(trim_OBJECTS) $(trim_DEPENDENCIES)
	@rm -f trim$(EXEEXT)
	$(LINK) $(trim_LDFLAGS) $(trim_OBJECTS) $(trim_LDADD) $(LIBS)

unproject$(EXEEXT): $(unproject_OBJECTS) $(unproject_DEPENDENCIES)
	@rm -f unproject$(EXEEXT)
	$(LINK) $(unproject_LDFLAGS) $(unproject_OBJECTS) $(unproject_LDADD) $(LIBS)

varray$(EXEEXT): $(varray_OBJECTS) $(varray_DEPENDENCIES)
	@rm -f varray$(EXEEXT)
	$(LINK) $(varray_LDFLAGS) $(varray_OBJECTS) $(varray_LDADD) $(LIBS)

wrap$(EXEEXT): $(wrap_OBJECTS) $(wrap_DEPENDENCIES)
	@rm -f wrap$(EXEEXT)
	$(LINK) $(wrap_LDFLAGS) $(wrap_OBJECTS) $(wrap_LDADD) $(LIBS)

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = book

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu book/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:
	-rm -rf .deps

maintainer-clean-depend:

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp
info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am:
install-exec: install-exec-am

install-data-am:
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am:
uninstall: uninstall-am
all-am: Makefile
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:


mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-checkPROGRAMS mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags mostlyclean-depend \
		mostlyclean-generic

mostlyclean: mostlyclean-am

clean-am:  clean-checkPROGRAMS clean-compile clean-libtool clean-tags \
		clean-depend clean-generic mostlyclean-am

clean: clean-am

distclean-am:  distclean-checkPROGRAMS distclean-compile \
		distclean-libtool distclean-tags distclean-depend \
		distclean-generic clean-am
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-checkPROGRAMS \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-checkPROGRAMS distclean-checkPROGRAMS \
clean-checkPROGRAMS maintainer-clean-checkPROGRAMS mostlyclean-compile \
distclean-compile clean-compile maintainer-clean-compile \
mostlyclean-libtool distclean-libtool clean-libtool \
maintainer-clean-libtool tags mostlyclean-tags distclean-tags \
clean-tags maintainer-clean-tags distdir mostlyclean-depend \
distclean-depend clean-depend maintainer-clean-depend info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-exec-am \
install-exec install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean

#LDFLAGS = -no-install

# execute all programs
exec: $(check_PROGRAMS)
	@for prog in $(check_PROGRAMS);	\
	do				\
	 echo -n "Running $$prog ..." ;	\
	 ./$$prog ;			\
	 echo ;				\
	done

@OVERRIDE_BUILD_RULES_TRUE@%.o: %.c
@OVERRIDE_BUILD_RULES_TRUE@	@echo '$(COMPILE) -c $<'; \
@OVERRIDE_BUILD_RULES_TRUE@	$(COMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
@OVERRIDE_BUILD_RULES_TRUE@	@-cp .deps/$(*F).pp .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	tr ' ' '\012' < .deps/$(*F).pp \
@OVERRIDE_BUILD_RULES_TRUE@	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
@OVERRIDE_BUILD_RULES_TRUE@	    >> .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	rm .deps/$(*F).pp
@OVERRIDE_BUILD_RULES_TRUE@%.lo: %.c
@OVERRIDE_BUILD_RULES_TRUE@	@echo '$(LTCOMPILE) -c $<'; \
@OVERRIDE_BUILD_RULES_TRUE@	$(LTCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
@OVERRIDE_BUILD_RULES_TRUE@	@-sed -e 's/^\([^:]*\)\.o[      ]*:/\1.lo \1.o :/' \
@OVERRIDE_BUILD_RULES_TRUE@	  < .deps/$(*F).pp > .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	tr ' ' '\012' < .deps/$(*F).pp \
@OVERRIDE_BUILD_RULES_TRUE@	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
@OVERRIDE_BUILD_RULES_TRUE@	    >> .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	rm -f .deps/$(*F).pp
@OVERRIDE_BUILD_RULES_TRUE@%.o: %.cc
@OVERRIDE_BUILD_RULES_TRUE@	@echo '$(CXXCOMPILE) -c $<'; \
@OVERRIDE_BUILD_RULES_TRUE@	$(CXXCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
@OVERRIDE_BUILD_RULES_TRUE@	@-cp .deps/$(*F).pp .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	tr ' ' '\012' < .deps/$(*F).pp \
@OVERRIDE_BUILD_RULES_TRUE@	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
@OVERRIDE_BUILD_RULES_TRUE@	    >> .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	rm .deps/$(*F).pp
@OVERRIDE_BUILD_RULES_TRUE@%.lo: %.cc
@OVERRIDE_BUILD_RULES_TRUE@	@echo '$(LTCXXCOMPILE) -c $<'; \
@OVERRIDE_BUILD_RULES_TRUE@	$(LTCXXCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
@OVERRIDE_BUILD_RULES_TRUE@	@-sed -e 's/^\([^:]*\)\.o[      ]*:/\1.lo \1.o :/' \
@OVERRIDE_BUILD_RULES_TRUE@	  < .deps/$(*F).pp > .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	tr ' ' '\012' < .deps/$(*F).pp \
@OVERRIDE_BUILD_RULES_TRUE@	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
@OVERRIDE_BUILD_RULES_TRUE@	    >> .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	rm -f .deps/$(*F).pp

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
