# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = @host_alias@
host_triplet = @host@
AS = @AS@
CC = @CC@
CPP = @CPP@
CXX = @CXX@
DLLEXT = @DLLEXT@
DLLTOOL = @DLLTOOL@
ECHO = @ECHO@
EXEEXT = @EXEEXT@
FX_CFLAGS = @FX_CFLAGS@
FX_LIBS = @FX_LIBS@
GGI_CFLAGS = @GGI_CFLAGS@
GGI_LIBS = @GGI_LIBS@
GLUT_CFLAGS = @GLUT_CFLAGS@
GLUT_LIBS = @GLUT_LIBS@
GLU_DIR = @GLU_DIR@
LIBGLUT_VERSION_INFO = @LIBGLUT_VERSION_INFO@
LIBGLU_VERSION_INFO = @LIBGLU_VERSION_INFO@
LIBGL_VERSION_INFO = @LIBGL_VERSION_INFO@
LIBMESA_VERSION_INFO = @LIBMESA_VERSION_INFO@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MESA_MD_FLAG = @MESA_MD_FLAG@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
SI_GLU_VERSION_INFO = @SI_GLU_VERSION_INFO@
STRIP = @STRIP@
SVGA_CFLAGS = @SVGA_CFLAGS@
SVGA_LIBS = @SVGA_LIBS@
THREAD_LIBS = @THREAD_LIBS@
VERSION = @VERSION@
X_LIBADD = @X_LIBADD@
demo_dirs = @demo_dirs@
extra_includes = @extra_includes@
extra_libraries = @extra_libraries@
ggi_confdir = @ggi_confdir@
ggi_libdir = @ggi_libdir@
glut_dir = @glut_dir@
use_si_glu = @use_si_glu@

AUTOMAKE_OPTIONS = 

INCLUDES = -I$(top_srcdir)/include $(GLUT_CFLAGS)

check_PROGRAMS = accum bitmap1 bitmap2 blendeq blendxor copy cursor depth 	eval fog font line logo nurb oglinfo olympic overlay point prim 	quad select shape sphere star stencil stretch texture tri wave


EXTRA_PROGRAMS = rgbtoppm

EXTRA_DIST = tkmap.c loadppm.c

LDADD = $(GLUT_LIBS) $(top_builddir)/$(GLU_DIR)/libGLU.la 	$(top_builddir)/src/libGL.la -lm

#LDFLAGS = -no-install

# default image
IMAGE = girl

# use double buffering if possible
BUFFER = -db

CLEANFILES = rgbtoppm $(IMAGE).ppm
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../conf.h
CONFIG_CLEAN_FILES = 
check_PROGRAMS =  accum$(EXEEXT) bitmap1$(EXEEXT) bitmap2$(EXEEXT) \
blendeq$(EXEEXT) blendxor$(EXEEXT) copy$(EXEEXT) cursor$(EXEEXT) \
depth$(EXEEXT) eval$(EXEEXT) fog$(EXEEXT) font$(EXEEXT) line$(EXEEXT) \
logo$(EXEEXT) nurb$(EXEEXT) oglinfo$(EXEEXT) olympic$(EXEEXT) \
overlay$(EXEEXT) point$(EXEEXT) prim$(EXEEXT) quad$(EXEEXT) \
select$(EXEEXT) shape$(EXEEXT) sphere$(EXEEXT) star$(EXEEXT) \
stencil$(EXEEXT) stretch$(EXEEXT) texture$(EXEEXT) tri$(EXEEXT) \
wave$(EXEEXT)

DEFS = @DEFS@ -I. -I$(srcdir) -I..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
X_CFLAGS = @X_CFLAGS@
X_LIBS = @X_LIBS@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_PRE_LIBS = @X_PRE_LIBS@
rgbtoppm_SOURCES = rgbtoppm.c
rgbtoppm_OBJECTS =  rgbtoppm.$(OBJEXT)
rgbtoppm_LDADD = $(LDADD)
rgbtoppm_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
rgbtoppm_LDFLAGS = 
accum_SOURCES = accum.c
accum_OBJECTS =  accum.$(OBJEXT)
accum_LDADD = $(LDADD)
accum_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
accum_LDFLAGS = 
bitmap1_SOURCES = bitmap1.c
bitmap1_OBJECTS =  bitmap1.$(OBJEXT)
bitmap1_LDADD = $(LDADD)
bitmap1_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
bitmap1_LDFLAGS = 
bitmap2_SOURCES = bitmap2.c
bitmap2_OBJECTS =  bitmap2.$(OBJEXT)
bitmap2_LDADD = $(LDADD)
bitmap2_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
bitmap2_LDFLAGS = 
blendeq_SOURCES = blendeq.c
blendeq_OBJECTS =  blendeq.$(OBJEXT)
blendeq_LDADD = $(LDADD)
blendeq_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
blendeq_LDFLAGS = 
blendxor_SOURCES = blendxor.c
blendxor_OBJECTS =  blendxor.$(OBJEXT)
blendxor_LDADD = $(LDADD)
blendxor_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
blendxor_LDFLAGS = 
copy_SOURCES = copy.c
copy_OBJECTS =  copy.$(OBJEXT)
copy_LDADD = $(LDADD)
copy_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
copy_LDFLAGS = 
cursor_SOURCES = cursor.c
cursor_OBJECTS =  cursor.$(OBJEXT)
cursor_LDADD = $(LDADD)
cursor_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
cursor_LDFLAGS = 
depth_SOURCES = depth.c
depth_OBJECTS =  depth.$(OBJEXT)
depth_LDADD = $(LDADD)
depth_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
depth_LDFLAGS = 
eval_SOURCES = eval.c
eval_OBJECTS =  eval.$(OBJEXT)
eval_LDADD = $(LDADD)
eval_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
eval_LDFLAGS = 
fog_SOURCES = fog.c
fog_OBJECTS =  fog.$(OBJEXT)
fog_LDADD = $(LDADD)
fog_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
fog_LDFLAGS = 
font_SOURCES = font.c
font_OBJECTS =  font.$(OBJEXT)
font_LDADD = $(LDADD)
font_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
font_LDFLAGS = 
line_SOURCES = line.c
line_OBJECTS =  line.$(OBJEXT)
line_LDADD = $(LDADD)
line_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
line_LDFLAGS = 
logo_SOURCES = logo.c
logo_OBJECTS =  logo.$(OBJEXT)
logo_LDADD = $(LDADD)
logo_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
logo_LDFLAGS = 
nurb_SOURCES = nurb.c
nurb_OBJECTS =  nurb.$(OBJEXT)
nurb_LDADD = $(LDADD)
nurb_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
nurb_LDFLAGS = 
oglinfo_SOURCES = oglinfo.c
oglinfo_OBJECTS =  oglinfo.$(OBJEXT)
oglinfo_LDADD = $(LDADD)
oglinfo_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
oglinfo_LDFLAGS = 
olympic_SOURCES = olympic.c
olympic_OBJECTS =  olympic.$(OBJEXT)
olympic_LDADD = $(LDADD)
olympic_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
olympic_LDFLAGS = 
overlay_SOURCES = overlay.c
overlay_OBJECTS =  overlay.$(OBJEXT)
overlay_LDADD = $(LDADD)
overlay_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
overlay_LDFLAGS = 
point_SOURCES = point.c
point_OBJECTS =  point.$(OBJEXT)
point_LDADD = $(LDADD)
point_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
point_LDFLAGS = 
prim_SOURCES = prim.c
prim_OBJECTS =  prim.$(OBJEXT)
prim_LDADD = $(LDADD)
prim_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
prim_LDFLAGS = 
quad_SOURCES = quad.c
quad_OBJECTS =  quad.$(OBJEXT)
quad_LDADD = $(LDADD)
quad_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
quad_LDFLAGS = 
select_SOURCES = select.c
select_OBJECTS =  select.$(OBJEXT)
select_LDADD = $(LDADD)
select_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
select_LDFLAGS = 
shape_SOURCES = shape.c
shape_OBJECTS =  shape.$(OBJEXT)
shape_LDADD = $(LDADD)
shape_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
shape_LDFLAGS = 
sphere_SOURCES = sphere.c
sphere_OBJECTS =  sphere.$(OBJEXT)
sphere_LDADD = $(LDADD)
sphere_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
sphere_LDFLAGS = 
star_SOURCES = star.c
star_OBJECTS =  star.$(OBJEXT)
star_LDADD = $(LDADD)
star_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
star_LDFLAGS = 
stencil_SOURCES = stencil.c
stencil_OBJECTS =  stencil.$(OBJEXT)
stencil_LDADD = $(LDADD)
stencil_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
stencil_LDFLAGS = 
stretch_SOURCES = stretch.c
stretch_OBJECTS =  stretch.$(OBJEXT)
stretch_LDADD = $(LDADD)
stretch_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
stretch_LDFLAGS = 
texture_SOURCES = texture.c
texture_OBJECTS =  texture.$(OBJEXT)
texture_LDADD = $(LDADD)
texture_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
texture_LDFLAGS = 
tri_SOURCES = tri.c
tri_OBJECTS =  tri.$(OBJEXT)
tri_LDADD = $(LDADD)
tri_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
tri_LDFLAGS = 
wave_SOURCES = wave.c
wave_OBJECTS =  wave.$(OBJEXT)
wave_LDADD = $(LDADD)
wave_DEPENDENCIES =  $(top_builddir)/$(GLU_DIR)/libGLU.la \
$(top_builddir)/src/libGL.la
wave_LDFLAGS = 
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@
DIST_COMMON =  README Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = gtar
GZIP_ENV = --best
DEP_FILES =  .deps/accum.P .deps/bitmap1.P .deps/bitmap2.P \
.deps/blendeq.P .deps/blendxor.P .deps/copy.P .deps/cursor.P \
.deps/depth.P .deps/eval.P .deps/fog.P .deps/font.P .deps/line.P \
.deps/logo.P .deps/nurb.P .deps/oglinfo.P .deps/olympic.P \
.deps/overlay.P .deps/point.P .deps/prim.P .deps/quad.P \
.deps/rgbtoppm.P .deps/select.P .deps/shape.P .deps/sphere.P \
.deps/star.P .deps/stencil.P .deps/stretch.P .deps/texture.P \
.deps/tri.P .deps/wave.P
SOURCES = rgbtoppm.c accum.c bitmap1.c bitmap2.c blendeq.c blendxor.c copy.c cursor.c depth.c eval.c fog.c font.c line.c logo.c nurb.c oglinfo.c olympic.c overlay.c point.c prim.c quad.c select.c shape.c sphere.c star.c stencil.c stretch.c texture.c tri.c wave.c
OBJECTS = rgbtoppm.$(OBJEXT) accum.$(OBJEXT) bitmap1.$(OBJEXT) bitmap2.$(OBJEXT) blendeq.$(OBJEXT) blendxor.$(OBJEXT) copy.$(OBJEXT) cursor.$(OBJEXT) depth.$(OBJEXT) eval.$(OBJEXT) fog.$(OBJEXT) font.$(OBJEXT) line.$(OBJEXT) logo.$(OBJEXT) nurb.$(OBJEXT) oglinfo.$(OBJEXT) olympic.$(OBJEXT) overlay.$(OBJEXT) point.$(OBJEXT) prim.$(OBJEXT) quad.$(OBJEXT) select.$(OBJEXT) shape.$(OBJEXT) sphere.$(OBJEXT) star.$(OBJEXT) stencil.$(OBJEXT) stretch.$(OBJEXT) texture.$(OBJEXT) tri.$(OBJEXT) wave.$(OBJEXT)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .obj .s
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) $(top_srcdir)/common_rules.make
	cd $(top_srcdir) && $(AUTOMAKE) --gnu samples/Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-checkPROGRAMS:

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)

distclean-checkPROGRAMS:

maintainer-clean-checkPROGRAMS:

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

rgbtoppm$(EXEEXT): $(rgbtoppm_OBJECTS) $(rgbtoppm_DEPENDENCIES)
	@rm -f rgbtoppm$(EXEEXT)
	$(LINK) $(rgbtoppm_LDFLAGS) $(rgbtoppm_OBJECTS) $(rgbtoppm_LDADD) $(LIBS)

accum$(EXEEXT): $(accum_OBJECTS) $(accum_DEPENDENCIES)
	@rm -f accum$(EXEEXT)
	$(LINK) $(accum_LDFLAGS) $(accum_OBJECTS) $(accum_LDADD) $(LIBS)

bitmap1$(EXEEXT): $(bitmap1_OBJECTS) $(bitmap1_DEPENDENCIES)
	@rm -f bitmap1$(EXEEXT)
	$(LINK) $(bitmap1_LDFLAGS) $(bitmap1_OBJECTS) $(bitmap1_LDADD) $(LIBS)

bitmap2$(EXEEXT): $(bitmap2_OBJECTS) $(bitmap2_DEPENDENCIES)
	@rm -f bitmap2$(EXEEXT)
	$(LINK) $(bitmap2_LDFLAGS) $(bitmap2_OBJECTS) $(bitmap2_LDADD) $(LIBS)

blendeq$(EXEEXT): $(blendeq_OBJECTS) $(blendeq_DEPENDENCIES)
	@rm -f blendeq$(EXEEXT)
	$(LINK) $(blendeq_LDFLAGS) $(blendeq_OBJECTS) $(blendeq_LDADD) $(LIBS)

blendxor$(EXEEXT): $(blendxor_OBJECTS) $(blendxor_DEPENDENCIES)
	@rm -f blendxor$(EXEEXT)
	$(LINK) $(blendxor_LDFLAGS) $(blendxor_OBJECTS) $(blendxor_LDADD) $(LIBS)

copy$(EXEEXT): $(copy_OBJECTS) $(copy_DEPENDENCIES)
	@rm -f copy$(EXEEXT)
	$(LINK) $(copy_LDFLAGS) $(copy_OBJECTS) $(copy_LDADD) $(LIBS)

cursor$(EXEEXT): $(cursor_OBJECTS) $(cursor_DEPENDENCIES)
	@rm -f cursor$(EXEEXT)
	$(LINK) $(cursor_LDFLAGS) $(cursor_OBJECTS) $(cursor_LDADD) $(LIBS)

depth$(EXEEXT): $(depth_OBJECTS) $(depth_DEPENDENCIES)
	@rm -f depth$(EXEEXT)
	$(LINK) $(depth_LDFLAGS) $(depth_OBJECTS) $(depth_LDADD) $(LIBS)

eval$(EXEEXT): $(eval_OBJECTS) $(eval_DEPENDENCIES)
	@rm -f eval$(EXEEXT)
	$(LINK) $(eval_LDFLAGS) $(eval_OBJECTS) $(eval_LDADD) $(LIBS)

fog$(EXEEXT): $(fog_OBJECTS) $(fog_DEPENDENCIES)
	@rm -f fog$(EXEEXT)
	$(LINK) $(fog_LDFLAGS) $(fog_OBJECTS) $(fog_LDADD) $(LIBS)

font$(EXEEXT): $(font_OBJECTS) $(font_DEPENDENCIES)
	@rm -f font$(EXEEXT)
	$(LINK) $(font_LDFLAGS) $(font_OBJECTS) $(font_LDADD) $(LIBS)

line$(EXEEXT): $(line_OBJECTS) $(line_DEPENDENCIES)
	@rm -f line$(EXEEXT)
	$(LINK) $(line_LDFLAGS) $(line_OBJECTS) $(line_LDADD) $(LIBS)

logo$(EXEEXT): $(logo_OBJECTS) $(logo_DEPENDENCIES)
	@rm -f logo$(EXEEXT)
	$(LINK) $(logo_LDFLAGS) $(logo_OBJECTS) $(logo_LDADD) $(LIBS)

nurb$(EXEEXT): $(nurb_OBJECTS) $(nurb_DEPENDENCIES)
	@rm -f nurb$(EXEEXT)
	$(LINK) $(nurb_LDFLAGS) $(nurb_OBJECTS) $(nurb_LDADD) $(LIBS)

oglinfo$(EXEEXT): $(oglinfo_OBJECTS) $(oglinfo_DEPENDENCIES)
	@rm -f oglinfo$(EXEEXT)
	$(LINK) $(oglinfo_LDFLAGS) $(oglinfo_OBJECTS) $(oglinfo_LDADD) $(LIBS)

olympic$(EXEEXT): $(olympic_OBJECTS) $(olympic_DEPENDENCIES)
	@rm -f olympic$(EXEEXT)
	$(LINK) $(olympic_LDFLAGS) $(olympic_OBJECTS) $(olympic_LDADD) $(LIBS)

overlay$(EXEEXT): $(overlay_OBJECTS) $(overlay_DEPENDENCIES)
	@rm -f overlay$(EXEEXT)
	$(LINK) $(overlay_LDFLAGS) $(overlay_OBJECTS) $(overlay_LDADD) $(LIBS)

point$(EXEEXT): $(point_OBJECTS) $(point_DEPENDENCIES)
	@rm -f point$(EXEEXT)
	$(LINK) $(point_LDFLAGS) $(point_OBJECTS) $(point_LDADD) $(LIBS)

prim$(EXEEXT): $(prim_OBJECTS) $(prim_DEPENDENCIES)
	@rm -f prim$(EXEEXT)
	$(LINK) $(prim_LDFLAGS) $(prim_OBJECTS) $(prim_LDADD) $(LIBS)

quad$(EXEEXT): $(quad_OBJECTS) $(quad_DEPENDENCIES)
	@rm -f quad$(EXEEXT)
	$(LINK) $(quad_LDFLAGS) $(quad_OBJECTS) $(quad_LDADD) $(LIBS)

select$(EXEEXT): $(select_OBJECTS) $(select_DEPENDENCIES)
	@rm -f select$(EXEEXT)
	$(LINK) $(select_LDFLAGS) $(select_OBJECTS) $(select_LDADD) $(LIBS)

shape$(EXEEXT): $(shape_OBJECTS) $(shape_DEPENDENCIES)
	@rm -f shape$(EXEEXT)
	$(LINK) $(shape_LDFLAGS) $(shape_OBJECTS) $(shape_LDADD) $(LIBS)

sphere$(EXEEXT): $(sphere_OBJECTS) $(sphere_DEPENDENCIES)
	@rm -f sphere$(EXEEXT)
	$(LINK) $(sphere_LDFLAGS) $(sphere_OBJECTS) $(sphere_LDADD) $(LIBS)

star$(EXEEXT): $(star_OBJECTS) $(star_DEPENDENCIES)
	@rm -f star$(EXEEXT)
	$(LINK) $(star_LDFLAGS) $(star_OBJECTS) $(star_LDADD) $(LIBS)

stencil$(EXEEXT): $(stencil_OBJECTS) $(stencil_DEPENDENCIES)
	@rm -f stencil$(EXEEXT)
	$(LINK) $(stencil_LDFLAGS) $(stencil_OBJECTS) $(stencil_LDADD) $(LIBS)

stretch$(EXEEXT): $(stretch_OBJECTS) $(stretch_DEPENDENCIES)
	@rm -f stretch$(EXEEXT)
	$(LINK) $(stretch_LDFLAGS) $(stretch_OBJECTS) $(stretch_LDADD) $(LIBS)

texture$(EXEEXT): $(texture_OBJECTS) $(texture_DEPENDENCIES)
	@rm -f texture$(EXEEXT)
	$(LINK) $(texture_LDFLAGS) $(texture_OBJECTS) $(texture_LDADD) $(LIBS)

tri$(EXEEXT): $(tri_OBJECTS) $(tri_DEPENDENCIES)
	@rm -f tri$(EXEEXT)
	$(LINK) $(tri_LDFLAGS) $(tri_OBJECTS) $(tri_LDADD) $(LIBS)

wave$(EXEEXT): $(wave_OBJECTS) $(wave_DEPENDENCIES)
	@rm -f wave$(EXEEXT)
	$(LINK) $(wave_LDFLAGS) $(wave_OBJECTS) $(wave_LDADD) $(LIBS)

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = samples

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu samples/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:
	-rm -rf .deps

maintainer-clean-depend:

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp
info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am:
install-exec: install-exec-am

install-data-am:
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am:
uninstall: uninstall-am
all-am: Makefile
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:


mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-checkPROGRAMS mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags mostlyclean-depend \
		mostlyclean-generic

mostlyclean: mostlyclean-am

clean-am:  clean-checkPROGRAMS clean-compile clean-libtool clean-tags \
		clean-depend clean-generic mostlyclean-am

clean: clean-am

distclean-am:  distclean-checkPROGRAMS distclean-compile \
		distclean-libtool distclean-tags distclean-depend \
		distclean-generic clean-am
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-checkPROGRAMS \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-checkPROGRAMS distclean-checkPROGRAMS \
clean-checkPROGRAMS maintainer-clean-checkPROGRAMS mostlyclean-compile \
distclean-compile clean-compile maintainer-clean-compile \
mostlyclean-libtool distclean-libtool clean-libtool \
maintainer-clean-libtool tags mostlyclean-tags distclean-tags \
clean-tags maintainer-clean-tags distdir mostlyclean-depend \
distclean-depend clean-depend maintainer-clean-depend info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-exec-am \
install-exec install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


# execute all programs
exec: $(check_PROGRAMS) $(IMAGE).ppm
	@for prog in $(check_PROGRAMS);	\
	do				\
	 echo -n "Running $$prog ..." ;	\
	 case "$$prog" in		\
	 copy) \
	    ./$$prog -f $(IMAGE).ppm ;;	\
	 quad | sphere | stretch | texture) \
	    ./$$prog $(BUFFER) -f $(IMAGE).ppm ;; \
	 bitmap* | blend* | font | select | shape | stencil) \
	    ./$$prog ;; 		\
	 *) ./$$prog $(BUFFER) ;;	\
	 esac ;				\
	 echo ;				\
	done

$(IMAGE).ppm: rgbtoppm
	./rgbtoppm $(top_srcdir)/images/$(IMAGE).rgb > $(IMAGE).ppm

@OVERRIDE_BUILD_RULES_TRUE@%.o: %.c
@OVERRIDE_BUILD_RULES_TRUE@	@echo '$(COMPILE) -c $<'; \
@OVERRIDE_BUILD_RULES_TRUE@	$(COMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
@OVERRIDE_BUILD_RULES_TRUE@	@-cp .deps/$(*F).pp .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	tr ' ' '\012' < .deps/$(*F).pp \
@OVERRIDE_BUILD_RULES_TRUE@	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
@OVERRIDE_BUILD_RULES_TRUE@	    >> .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	rm .deps/$(*F).pp
@OVERRIDE_BUILD_RULES_TRUE@%.lo: %.c
@OVERRIDE_BUILD_RULES_TRUE@	@echo '$(LTCOMPILE) -c $<'; \
@OVERRIDE_BUILD_RULES_TRUE@	$(LTCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
@OVERRIDE_BUILD_RULES_TRUE@	@-sed -e 's/^\([^:]*\)\.o[      ]*:/\1.lo \1.o :/' \
@OVERRIDE_BUILD_RULES_TRUE@	  < .deps/$(*F).pp > .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	tr ' ' '\012' < .deps/$(*F).pp \
@OVERRIDE_BUILD_RULES_TRUE@	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
@OVERRIDE_BUILD_RULES_TRUE@	    >> .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	rm -f .deps/$(*F).pp
@OVERRIDE_BUILD_RULES_TRUE@%.o: %.cc
@OVERRIDE_BUILD_RULES_TRUE@	@echo '$(CXXCOMPILE) -c $<'; \
@OVERRIDE_BUILD_RULES_TRUE@	$(CXXCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
@OVERRIDE_BUILD_RULES_TRUE@	@-cp .deps/$(*F).pp .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	tr ' ' '\012' < .deps/$(*F).pp \
@OVERRIDE_BUILD_RULES_TRUE@	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
@OVERRIDE_BUILD_RULES_TRUE@	    >> .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	rm .deps/$(*F).pp
@OVERRIDE_BUILD_RULES_TRUE@%.lo: %.cc
@OVERRIDE_BUILD_RULES_TRUE@	@echo '$(LTCXXCOMPILE) -c $<'; \
@OVERRIDE_BUILD_RULES_TRUE@	$(LTCXXCOMPILE) -Wp,$(MESA_MD_FLAG),.deps/$(*F).pp -c $<
@OVERRIDE_BUILD_RULES_TRUE@	@-sed -e 's/^\([^:]*\)\.o[      ]*:/\1.lo \1.o :/' \
@OVERRIDE_BUILD_RULES_TRUE@	  < .deps/$(*F).pp > .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	tr ' ' '\012' < .deps/$(*F).pp \
@OVERRIDE_BUILD_RULES_TRUE@	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
@OVERRIDE_BUILD_RULES_TRUE@	    >> .deps/$(*F).P; \
@OVERRIDE_BUILD_RULES_TRUE@	rm -f .deps/$(*F).pp

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
