.rn '' }`
''' $RCSfile: GLwDrawingArea.3x,v $$Revision: 1.1.1.1 $$Date: 1999/08/19 00:55:42 $
''' 
''' $Log: GLwDrawingArea.3x,v $
''' Revision 1.1.1.1  1999/08/19 00:55:42  jtg
''' Imported sources
'''
''' Revision 1.1  1999/02/25 01:55:01  brianp
''' initial check-in
'''
''' 
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.if t .ds PI \(*p
.if n .ds PI PI
'br\}
.TH GLWDRAWINGAREA 1 "\*(RP"
.UC
.if n .hy 0 
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd S B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds / 
.	ds q 
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
GLwDrawingArea, GLwMDrawingArea \- Open GL drawing widgets.
.SH "SYNOPSIS"
.PP
.Vb 3
\&  #include <GL/GLwDrawA.h>
\&  widget = XtCreateWidget(widget, glwDrawingAreaWidgetClass, ...);
\&  ld ... -lGLw -l<anywidgetlibrary> -lXt -lGL -lX11 ...
.Ve
.Vb 3
\&  #include <GL/GLwMDrawA.h>
\&  widget = XtCreateWidget(widget, glwMDrawingAreaWidgetClass, ...);
\&  ld ... -lGLw -lXm -lXt -lGL -lX11 ...
.Ve
.SH "DESCRIPTION"
\fIGLwDrawingArea\fR and \fIGLwMDrawingArea\fR are widgets suitable for Open GL
drawing.  They provide a window with the appropriate visual and
colormaps needed for open GL, based on supplied parameters.
\fIGLwDrawingArea\fR and \fIGLwMDrawingArea\fR also provide callbacks for redraw,
resize, input, and initialization.
.PP
\fIGLwDrawingArea\fR is not a part of any widget set, but depends only on
Xt.  \fIGLwDrawingArea\fR can be used with any widget set.  \fIGLwMDrawingArea\fR
is identical to \fIGLwDrawingArea\fR except that it is a subclass of the
Motif widget class \fIXmPrimitive\fR and has resources and defaults suitable
for use with Motif.  For example, \fIGLwMDrawingArea\fR provides the default
Motif background and foreground colors for resources, and deals better
with keyboard traversal.  Although the \fIGLwDrawingArea\fR widget can be
used in a Motif program, it is recommended that \fIGLwMDrawingArea\fR be
used instead.
.PP
Since both \fIGLwDrawingArea\fR and \fIGLwMDrawingArea\fR widgets behave almost
identically, the remainder of this manual page will refer only to
\fIGLwDrawingArea\fR, except when the behaviors differ.  Unless explicitly
stated, all statements about \fIGLwDrawingArea\fR also apply to
\fIGLwMDrawingArea\fR.
.PP
Among the information provided when creating a \fIGLwDrawingArea\fR is
information necessary to determine the visual.  This may be provided
in three ways, all of them through resources.  A specific visualInfo
structure may be passed in.  (This visualInfo must have been obtained
elsewhere; it is the application designer's responsibility to make
sure that it is compatible with the open GL rendering done by the
application).  Alternatively, an attribute list may be provided.  This
attribute list is formatted identically to that used for direct open
GL programming. Finally, each attribute can be specified as an
individual resource. The latter method is the simplest, and is the
only method that works from resource files.
.PP
In addition to allocating the visual, the \fIGLwDrawingArea\fR will also
allocate the colormap unless one is provided by the application.  (If
one is provided it is the application writer's responsibility to
guarantee compatibility between the colormap and the visual).  If an
application creates multiple \fIGLwDrawingAreas\fR are created in the same
visual, the same colormap will be used.  (However the colormap will
not be shared among separate applications).
.PP
Creating the widget does not actually create the window until it is
realized, and consequently, the application should not perform any
open GL operations to the window immediately after creation.  Instead
the application must wait until after it has realized the
window. Alternatively, the ginit callback may be used to indicate when
the window has been created.  Upon receiving this callback, the
application can perform all open GL initialization for the window, and
can subsequently perform other operations on it.  The initialization
is discussed in more detail below.
.PP
Applications select which \fIGLwDrawingArea\fR they are accessing using
either \fIglXMakeCurrent\fR or the convenience function
\fIGLwDrawingAreaMakeCurrent\fR which uses a widget instead of a display and
window.  If there is only one \fIGLwDrawingArea\fR this need only be called
once, however if there is more than one \fIGLwDrawingArea\fR it should be
called at the start of each callback.  Callbacks in this case include
not only callbacks provided by the widget itself, but any other
callback that leads to GL activity such as a timeout or a workproc.
.PP
If an application is using double buffering, it may call
\fIGLwDrawingAreaSwapBuffers\fR instead of \fIglXSwapBuffers\fR. This allows the
use of the widget instead of the display and window.
.Sh "GLwDrawingArea Classes"
\fIGLwDrawingArea\fR inherits behavior and resources from the Core class.
The class pointer is \fIGLwDrawingAreaClass\fR.  The class name is
\fIGLwDrawingArea\fR.
.Sh "GLwMDrawingArea  Classes"
\fIGLwMDrawingArea\fR inherits behavior and resources from the \fIXmPrimitive\fR
and Core classes.  The class pointer is \fIGLwMDrawingAreaClass\fR.  The
class name is \fIGLwMDrawingArea\fR.
.Sh "New Resources"
The following tables define a set of widget resources used by the
programmer to specify data.  The programmer can also set the resource
values for the inherited classes to set attributes for this widget.
To reference a resource by name or by class in a .Xdefaults file,
remove the \fIGLwN\fR or \fIGLwC\fR prefix and use the remaining letters.  There
are two tables included.  The first table includes resources that
correspond directly to the attributes used by \fIglXChooseVisual\fR.  As
with \fIglXChooseVisual\fR, all Boolean resources default to \s-1FALSE\s0 and all
integer resources default to 0.  These resources can all be set only
at creation time, and are used to determine the visual.  If either the
\fIGLwNattribList\fR or \fIGLwNvisualInfo\fR resource is set, these resources are
ignored.  The specific meaning of these resources is discussed in the
\fIglXChooseVisual\fR manual page and will not be discussed here.
.PP
.Vb 52
\&  ___________________________________________________________________________
\&  |                    |                    |         |                      |
\&  | Name               | Class              | Type    | OpenGL attribute     |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNbufferSize     | GLwCBufferSize     | int     | GLX_BUFFER_SIZE      |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNlevel          | GLwCLevel          | int     | GLX_LEVEL            |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNrgba           | GLwCRgba           | Boolean | GLX_RGBA             |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwdoublebuffer    | GLwCDoublebuffer   | Boolean | GLX_DOUBLEBUFFER     |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNstereo         | GLwCStereo         | Boolean | GLX_STEREO           |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNauxBuffers     | GLwCAuxBuffers     | Boolean | GLX_AUX_BUFFERS      |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNredSize        | GLwCColorSize      | int     | GLX_RED_SIZE         |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNgreenSize      | GLwCColorSize      | int     | GLX_GREEN_SIZE       |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNblueSize       | GLwCColorSize      | int     | GLX_BLUE_SIZE        |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNalphaSize      | GLwCAlphaSize      | int     | GLX_ALPHA_SIZE       |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNDepthSize      | GLwCDepthSize      | int     | GLX_DEPTH_SIZE       |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNStencilSize    | GLwCStencilSize    | int     | GLX_STENCIL_SIZE     |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNaccumRedSize   | GLwCAccumColorSize | int     | GLX_ACCUM_RED_SIZE   |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNaccumGreenSize | GLwCAccumColorSize | int     | GLX_ACCUM_GREEN_SIZE |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNaccumBlueSize  | GLwCAccumColorSize | int     | GLX_ACCUM_BLUE_SIZE  |
\&  |____________________|____________________|_________|______________________|
\&  |                    |                    |         |                      |
\&  | GLwNaccumAlphaSize | GLwCAccumAlphaSize | int     | GLX_ACCUM_ALPHA_SIZE |
\&  |____________________|____________________|_________|______________________|
.Ve
The following table lists other resources of the \fIGLwDrawingArea\fR
widget.  each of these will be described subsequently The codes in the
access column indicate if the given resource can be set at creation
time (C), set by using \fIXtSetValues\fR (S), retrieved by using \fIXtGetValues\fR
(G), or is not applicable (N/A).
.PP
.Vb 34
\&  ______________________________________________________________________________________
\&  |                         |                       |                |         |        |
\&  | Name                    | Class                 | Type           | Default | Access |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNallocateBackground  | GLwCAllocateColors    | Boolean        | FALSE   | CG     |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNallocateOtherColors | GLwCAllocateColors    | Boolean        | FALSE   | CG     |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNattribList          | GLwCAttribList        | int *          | NULL    | CG     |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNexposeCallback      | GLwCCallback          | XtCallbackList | NULL    | C      |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNginitCallback       | GLwCCallback          | XtCallbackList | NULL    | C      |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNinputCallback       | GLwCCallback          | XtCallbackList | NULL    | C      |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNinstallBackground   | GLwCInstallBackground | Boolean        | TRUE    | CG     |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNinstallColormap     | GLwCInstallColormap   | Boolean        | TRUE    | CG     |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNresizeCallback      | GLwCCallback          | XtCallbackList | NULL    | C      |
\&  |_________________________|_______________________|________________|_________|________|
\&  |                         |                       |                |         |        |
\&  | GLwNvisualInfo          | GLwCVisualInfo        | XVisualInfo*   | NULL    | CG     |
\&  |_________________________|_______________________|________________|_________|________|
.Ve
.Ip "GLwNallocateBackground" 4
\fB[Caveat: This resource is not honored yet.]\fR
.Sp
If \s-1TRUE\s0, the background pixel and pixmap will be allocated if
appropriate using the newly calculated colormap and visual.  If \s-1FALSE\s0,
they will retain values calculated using the parent's colormap and
visual.  Applications which wish to have X clear their background for
them will usually set this to \s-1TRUE\s0.  Applications clearing their own
background will often set this to \s-1FALSE\s0, although they may set this to
\s-1TRUE\s0 if they query the background for their own use. One reason to
leave this resource \s-1FALSE\s0 is that if color index mode is in use this
avoid using up a pixel from the newly allocated colormap.  Also, on
hardware that supports only one colormap, the application may need to
do more careful color allocation to avoid flashing between the openGL
colormap and the default X colormap.  (Note that because of the way Xt
works, the background colors are originally calculated using the
default colormap; if this resource is set they can be recalculated
correctly. If a colormap was explicitly supplied to the widget rather
than being dynamically calculated, these resources are always
calculated using that colormap.)
.Ip "GLwNallocateOtherColors" 4
\fB[Caveat: This resource is not honored yet.]\fR
.Sp
This is similar to \fIGLwNallocateBackground\fR, but allocates other colors
normally allocated by widgets.  Although the \fIGLwDrawingArea\fR and
\fIGLwMDrawingArea\fR widget do not make use of these colors the application
may choose to query them.  For the non-Motif \fIGLwDrawingArea\fR widget
there are no other colors allocated, so this resource is a no-op.  For
the Motif \fIGLwMDrawingArea\fR are widget, the \fIXmPrimitive\fR resources
\fIXmNforeground\fR, \fIXmNhighlightColor\fR, and \fIXmNhighlightPixmap\fR are
calculated.
.Ip "GLwNattribList" 4
Contains the list of attributes suitable for a call to
\fIglXChooseVisual\fR.  If this resource is \s-1NULL\s0, it is calculated based on
the attribute resources.  If it is not \s-1NULL\s0, the attribute resources
are ignored.
.Ip "GLwNexposeCallback" 4
Specifies the list of callbacks that is called when the widget
receives an exposure event.  The callback reason is \fIGLwCR_EXPOSE\fR.  The
callback structure also includes the exposure event.  The application
will generally want to redraw the scene.
.Ip "GLwNginitCallback" 4
Specifies the list of callbacks that is called when the widget is
first realized.  Since no open \s-1GL\s0 operations can be done before the
widget is realized, this callback can be used to perform any
appropriate open \s-1GL\s0 initialization such as creating a context.  The
callback reason is \fIGLwCR_GINIT\fR.
.Ip "GLwNinputCallback" 4
Specifies the list of callbacks that is called when the widget
receives a keyboard or mouse event.  By default, the input callback is
called on each key press and key release, on each mouse button press
and release, and whenever the mouse is moved while a button is
pressed.  However this can be changed by providing a different
translation table. The callback structure also includes the input
event.  The callback reason is \fIGLwCR_INPUT\fR.
.Sp
The input callback is provided as a programming convenience, as it
provides a convenient way to catch all input events.  However, a more
modular program can often be obtained by providing specific actions
and translations in the application rather than using a single catch
all callback.  Use of explicit translations can also provide for more
customizability.
.Ip "GLwNinstallBackground" 4
\fB[Caveat: This resource is not honored yet.]\fR
.Sp
If set to \s-1TRUE\s0, the background is installed on the window. If set to
\s-1FALSE\s0, the window has no background.  This resource has no effect
unless \fIGLwNallocateBackground\fR is also \s-1TRUE\s0.
.Ip "GLwNinstallColormap" 4
If set to \s-1TRUE\s0, the widget will call \fIXSetWMColormapWindows\fR to tell the
window manager to install the colormap when the window's shell has
focus.  If set to \s-1FALSE\s0, this will not be called.  For applications
with multiple \fIGLwDrawingAreas\fR sharing a single colormap, it is most
efficient to set this resource to \s-1TRUE\s0 for exactly one \fIGLwDrawingArea\fR
with each colormap.  If an application needs additional control over
the order of colormaps, this resource can be set to \s-1FALSE\s0, with the
application calling \fIXSetWMColormapWindows\fR explicitly.
.Ip "GLwNresizeCallback" 4
Specifies the list of callbacks that is called when the \fIGLwDrawingArea\fR
is resized.  The callback reason is \fIGLwCR_RESIZE\fR.
.Ip "GLwNvisualInfo" 4
Contains a pointer to the window's visual info structure.  If \s-1NULL\s0,
the visualInfo is calculated at widget creation time based on the
\fIGLwNattributeList\fR resource (which is itself calculated from the
various resources).  If \fIGLwNvisualInfo\fR is not \s-1NULL\s0 the
\fIGLwNattributList\fR and the attribute resources are ignored.
.Sh "Inherited Resources"
\fB[Caveat: The colormap and background resources do not receive special
treatment yet.]\fR
.PP
Both \fIGLwDrawingArea\fR and \fIGLwMDrawingArea\fR inherit behavior and resources
from the core superclass. Other than the behavior of the colormap and
background resources described previously, all defaults are the same
as for core.
.PP
In addition, the Motif version \fIGLwMDrawingArea\fR also inherits from
\fIXmPrimitive\fR.  The behavior of the color resources has been described
previously.  The TraversalOn resource is disabled for this widget, but
if keyboard input is required it should be enabled.  (Also, the
application should call \f(CWXmProcessTraversal(widget, XmTRAVERSE_CURRENT)\fR
whenever mouse button 1 is clicked in the widget.  This is similar to
the requirements of the Motif Drawing area.) Because Motif gets
confused by having multiple visuals in one top level shell,
\fIXmNhighlightOnEnter\fR has been disabled, and \fIXmNhighlightThickness\fR has
been set to 0.
.Sh "Callback Information"
A pointer to the following structure is passed to each callback:
.PP
.Vb 6
\&  typedef struct
\&  {
\&    int      reason;
\&    XEvent   * event;
\&    Dimensionwidth, height;
\&  } GLwDrawingAreaCallbackStruct;
.Ve
.Ip "reason" 4
Indicates why the callback was invoked.  Appropriate values are stated
in the above resource descriptions.  For Motif programmers, the values
\fIGLwCR_EXPOSE\fR, \fIGLwCR_RESIZE\fR, and \fIGLwCR_INPUT\fR are equal to \fIXmCR_EXPOSE\fR,
\fIXmCR_RESIZE\fR, and \fIXmCR_INPUT\fR respectively.  \fIGLwCR_GINIT\fR does not have a
Motif equivalent.
.Ip "event" 4
Points to the XEvent that triggered the callback.
This is \s-1NULL\s0 for \fIGLwNginitCallback\fR and
\fIGLwNresizeCallback\fR.
.Ip "width" 4
.Ip "height" 4
Are set to the width and height of the window.
.Sh "Translations"
\fIGLwDrawingArea\fR has the translations listed below.
.PP
.Vb 5
\&  <KeyDown>:     glwInput()
\&  <KeyUp>:       glwInput()
\&  <BtnDown>:     glwInput()
\&  <BtnUp>:       glwInput()
\&  <BtnMotion>:   glwInput()
.Ve
\fIGLwMDrawingArea\fR has the following additional translation:
.PP
.Vb 1
\&  <Key>osfHelp:  PrimitiveHelp()
.Ve
An application wishing to catch other events than these defaults can
do so by installing a different translation table.
.Sh "Action Routines"
The \fIGLwDrawingArea\fR has the following action routine:
.Ip "glwInput()" 4
Called whenever one of the above translations specifies that input has
occurred.  Its sole purpose is to call the input callback.
.SH "INITIALIZATION"
When the widget is initially created (e.g. through \fIXtCreateWidget\fR(3X))
the associated window is not actually created.  Instead, window
creation is delayed until the widget is realized.  However,
\fIglXchooseVisual\fR is called immediately, so information based on its
results is available.
.PP
Between the time the widget is created and it is realized, the
following apply:
.Ip "" 4
No open \s-1GL\s0 operations can be done to the window
.Ip "" 4
No resize callbacks are generated.
.Ip "" 4
The normal window is available (\fIXtWindow\fR returns \s-1NULL\s0).
.Ip "" 4
\fIGLwDrawingAreaMakeCurrent\fR (and \fIglXMakeCurrent\fR) should not be called.
.PP
When the widget is realized, the following actions take place:
.Ip "" 4
The window is created.
.Ip "" 4
The ginit callback is called.  The user may use this callback to
perform any needed open \s-1GL\s0 initialization to the window.
.SH "NOTES"
When using the input callback to receive keyboard input, the keycode
in the event must be converted to a KeySym.  Use \fIXLookupKeysym\fR(3X) or
\fIXLookupString\fR(3X) to do the conversion.  Keyboard input can also be
dealt using translations, in which case no such conversion is
required.
.PP
Motif programmers should keep in mind that OSF uses virtual bindings
and replaces some of the key bindings.  As a common example, if the
ESC key is to be used to exit the program (as it often is in GL
programs), the translation should specify <key>osfCancel instead of
<key>Escape.
.PP
Motif programmers may also create a \fIGLwMDrawingArea\fR widget with the
Motif style \fIGLwCreateMDrawingArea\fR.
.SH "EXAMPLE"
Here are some   code fragments that create a \fIGLwDrawingArea\fR
widget, and manage the appropriate callbacks.
.PP
.Vb 3
\&   #include <X11/GLW/GLwDrawingArea.h>
\&   static GLXContext glx_context;  /* assume only one context */
\&   . . .
.Ve
.Vb 7
\&   main()
\&   {
\&       Arg args[10];
\&       int n;
\&       Widget parent;/* The parent of the gl widget */
\&       Widget glw;/* The GLwDrawingArea widget          */
\&       . . .
.Ve
.Vb 13
\&       /* Create the widget using RGB mode.  This can also be set
\&        * in an X Defaults file
\&        */
\&       n = 0;
\&       XtSetArg(args[n], GLwNrgba, TRUE); n++;
\&       glw = XtCreateManagedWidget("glw", GLwDrawingAreaWidgetClass,
\&                  parent, args, n);
\&       XtAddCallback(glw, GLwNexposeCallback, exposeCB, 0);
\&       XtAddCallback(glw, GLwNresizeCallback, resizeCB, 0);
\&       XtAddCallback(glw, GLwNginitCallback, ginitCB, 0);
\&       /* Also add input callback if needed */
\&       . . .
\&   }
.Ve
.Vb 7
\&   static void
\&   exposeCB(Widget w, XtPointer client_data,
\&             GLwDrawingAreaCallbackStruct call_data)
\&   {
\&       GLwDrawingAreaMakeCurrent (w, glx_context);
\&       /* redraw the display */
\&   }
.Ve
.Vb 7
\&   static void
\&   resizeCB(Widget w, XtPointer client_data,
\&             GLwDrawingAreaCallbackStruct call_data)
\&   {
\&       GLwDrawingAreaMakeCurrent (w, glx_context);
\&       /* perform any resize actions */
\&   }
.Ve
.Vb 6
\&   static void
\&   ginitCB(Widget w, XtPointer client_data,
\&             GLwDrawingAreaCallbackStruct call_data)
\&   {
\&       Arg args[1];
\&       XVisualInfo *vi;
.Ve
.Vb 2
\&       XtSetArg(args[0], GLwNvisualInfo, &vi);
\&       XtGetValues(w, args, 1);
.Ve
.Vb 5
\&       /* create a visual context */
\&       glx_context = glXCreateContext(XtDisplay(w), vi, 0, GL_FALSE);
\&       GLwDrawingAreaMakeCurrent (w, glx_context);
\&       /* Perform any necessary graphics initialization.*/
\&   }
.Ve
The Motif program need only differ by including GLwMDrawingArea.h
instead of GLwDrawingArea.h and by creating a widget of type
\fIGLwMDrawingAreaWidgetClass\fR instead of \fIGLwDrawingAreaWidgetClass\fR.  As
an alternative, the Motif program could use \fIGLwCreateMDraw\fR(3X)
instead.
.SH "WARNINGS"
If a \fIGLwDrawingArea\fR widget is created as a child of an already
realized widget, the \fIGLwDrawingArea\fR widget will be created
immediately, without giving the user an opportunity to add the ginit
callback.  In such a case, initialization should be done immediately
after creating the widget rather than by using the callback.
.PP
If the non-Motif \fIGLwDrawingArea\fR widget is used in a Motif program and
keyboard traversal is attempted, the behavior is undefined if the user
traverses into the \fIGLwDrawingArea\fR widget.
.SH "RELATED INFORMATION"
the \fIglXChooseVisual\fR manpage, the \fIGLwDrawingAreaMakeCurrent\fR manpage, the \fIglXMakeCurrent\fR manpage,
the \fIGLwDrawingAreaSwapBuffers\fR manpage, the \fIGLwCreateMDraw\fR manpage, the \fICore\fR manpage,
the \fIXmPrimitive\fR manpage, the \fIVirtualBindings\fR manpage, the \fIGflush\fR manpage),
the \fIXSetWMColormapWindows\fR manpage and the Open GL spec.
.SH "DATE"
$Id: GLwDrawingArea.3x,v 1.1.1.1 1999/08/19 00:55:42 jtg Exp $

.rn }` ''
