<HTML>
<HEAD>
<TITLE>POV-Ray 3.1 Documentation - Bicubic Patch</TITLE>
</HEAD>
<BODY BGCOLOR="#FFCC66" TEXT="#000000" LINK="#0000FF" VLINK="#000080" ALINK="#FF0000">
<P ALIGN="CENTER">
Previous:<A HREF="pov251.htm">Finite Patch Primitives</A>&nbsp;&nbsp;
<A HREF="povuser.htm">Main Index</A>&nbsp;&nbsp;
Next:<A HREF="pov253.htm">Disc</A>
</P>
<HR>
<BR>
<H4><A NAME="_Toc414199087"><A NAME="_Toc429993597">Bicubic Patch</A></A></H4>
<P>A <b><code>bicubic_patch</code></b> is a 3D curved surface created from a mesh of triangles. POV-Ray supports a type of bicubic patch called a <I>Bezier patch</I>. A bicubic patch is defined as follows:</P>
<I><DL>
<DT>BICUBIC_PATCH:</DT>
</I><b><code><DD>bicubic_patch {</DD>
</code></b><DD>     <I>PATCH_ITEMS...</DD>
<DD>     &lt;Point_1&gt;,&lt;Point_2&gt;,&lt;Point_3&gt;,&lt;Point_4&gt;,</DD>
<DD>     &lt;Point_5&gt;,&lt;Point_6&gt;,&lt;Point_7&gt;,&lt;Point_8&gt;,</DD>
<DD>     &lt;Point_9&gt;,&lt;Point_10&gt;,&lt;Point_11&gt;,&lt;Point_12&gt;,</DD>
<DD>     &lt;Point_13&gt;,&lt;Point_14&gt;,&lt;Point_15&gt;,&lt;Point_16&gt;</DD>
</I><DD>     <I>[OBJECT_MODIFIERS...]</DD>
</I><b><code><DD>}</DD>
</code></b><I><DT>PATCH_ITEMS:</DT>
</I><b><code><DD>type</code></b> <I>Patch_Type</I>   |   <b><code>u_steps</code></b> <I>Num_U_Steps</I>   |   <b><code>v_steps</code></b> <I>Num_V_Steps</I>   |   <b><code>flatness</code></b> <I>Flatness</DD>
</DL>
</I><P>The keyword <b><code>type</code></b> is followed by a float <I>Patch_Type</I> which currently must be either 0 or 1. For type 0 only the control points are retained within POV-Ray. This means that a minimal amount of memory is needed but POV-Ray will need to perform many extra calculations when trying to render the patch. Type 1 preprocesses the patch into many subpatches. This results in a significant speedup in rendering at the cost of memory.</P>
<P>The four parameters <b><code>type</code></b>, <b><code>flatness</code></b>, <b><code>u_steps</code></b> and <b><code>v_steps</code></b> may appear in any order. All but <b><code>flatness</code></b> are required.  They are followed by 16 vectors (4 rows of 4) that define the x, y, z coordinates of the 16 control points which define the patch. The patch touches the four corner points <I>&lt;Point_1&gt;</I>, <I>&lt;Point_4&gt;</I>, <I>&lt;Point_13&gt;</I> and <I>&lt;Point_16&gt;</I> while the other 12 points pull and stretch the patch into shape. The Bezier surface is enclosed by the convex hull formed by the 16 control points, this is known as the <I>convex hull property</I>.</P>
<P>The keywords <b><code>u_steps</code></b> and <b><code>v_steps</code></b> are each followed by integer values which tell how many rows and columns of triangles are the minimum to use to create the surface. The maximum number of individual pieces of the patch that are tested by POV-Ray can be calculated from the following: <I>pieces = 2^u_steps * 2^v_steps</I>.</P>
<P>This means that you really should keep <b><code>u_steps</code></b> and <b><code>v_steps</code></b> under 4. Most patches look just fine with <b><code>u_steps 3</code></b> and <b><code>v_steps 3</code></b>, which translates to 64 subpatches (128 smooth triangles).</P>
<P>As POV-Ray processes the Bezier patch it makes a test of the current piece of the patch to see if it is flat enough to just pretend it is a rectangle. The statement that controls this test is specified with the <b><code>flatness</code></b> keyword followed by a float. Typical flatness values range from 0 to 1 (the lower the slower).  The default if none is specified is 0.0.</P>
<P>If the value for flatness is 0 POV-Ray will always subdivide the patch to the extend specified by <b><code>u_steps</code></b> and <b><code>v_steps</code></b>. If flatness is greater than 0 then every time the patch is split, POV-Ray will check to see if there is any need to split further.</P>
<P>There are both advantages and disadvantages to using a non-zero flatness. The advantages include:</P><dir>
  -  If the patch isn't very curved, then this will be detected and POV-Ray won't waste a lot of time looking at the wrong pieces.</P>
<P>  -  If the patch is only highly curved in a couple of places, POV-Ray will keep subdividing there and concentrate it's efforts on the hard part.</P>
</dir>
<P>The biggest disadvantage is that if POV-Ray stops subdividing at a particular level on one part of the patch and at a different level on an adjacent part of the patch there is the potential for cracking. This is typically visible as spots within the patch where you can see through. How bad this appears depends very highly on the angle at which you are viewing the patch.</P>
<P>Like triangles, the bicubic patch is not meant to be generated by hand. These shapes should be created by a special utility. You may be able to acquire utilities to generate these shapes from the same source from which you obtained POV-Ray.  Here is an example:</P>
<PRE>  bicubic_patch {
    type 0
    flatness 0.01
    u_steps 4
    v_steps 4
    &lt;0, 0, 2&gt;, &lt;1, 0, 0&gt;, &lt;2, 0, 0&gt;, &lt;3, 0,-2&gt;,
    &lt;0, 1  0&gt;, &lt;1, 1, 0&gt;, &lt;2, 1, 0&gt;, &lt;3, 1, 0&gt;,
    &lt;0, 2, 0&gt;, &lt;1, 2, 0&gt;, &lt;2, 2, 0&gt;, &lt;3, 2, 0&gt;,
    &lt;0, 3, 2&gt;, &lt;1, 3, 0&gt;, &lt;2, 3, 0&gt;, &lt;3, 3, -2&gt;
  }</PRE>
<P>The triangles in a POV-Ray <b><code>bicubic_patch</code></b> are automatically smoothed using normal interpolation but it is up to the user (or the user's utility program) to create control points which smoothly stitch together groups of patches.</P>

<BR>
<HR>
<P ALIGN="CENTER">
Previous:<A HREF="pov251.htm">Finite Patch Primitives</A>&nbsp;&nbsp;
<A HREF="povuser.htm">Main Index</A>&nbsp;&nbsp;
Next:<A HREF="pov253.htm">Disc</A>
</P>
</BODY>
</HTML>
